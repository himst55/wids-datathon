{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20013,"status":"ok","timestamp":1740352611849,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"j253HnT5nm3q","outputId":"39a3c111-0175-47c9-d028-48fc1c557227"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1740352611858,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"lbtqtxk6oHPd","outputId":"713defef-b9fb-4118-c7df-7f360333579a"},"outputs":[{"output_type":"stream","name":"stdout","text":["'Copy of Data Dictionary.gsheet'   SAMPLE_SUBMISSION.xlsx   TRAIN\n"," FullDataDictionaries\t\t   TEST\t\t\t   'widsdatathon notebook'\n"]}],"source":["import os\n","os.chdir('/content/drive/MyDrive/widsdatathon2025')\n","!ls"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":47,"status":"ok","timestamp":1740352611905,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"GfpxI3pIoPCs","outputId":"f555864f-808a-4016-895f-05be83c35245"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/widsdatathon2025/TRAIN\n","'TRAIN_CATEGORICAL_METADATA.xlsx - training_combined.csv'\n"," TRAIN_FUNCTIONAL_CONNECTOME_MATRICES.csv\n","'TRAINING_SOLUTIONS.xlsx - training_combined.csv'\n","'TRAIN_QUANTITATIVE_METADATA.xlsx - training_combined.csv'\n"]}],"source":["%cd TRAIN\n","!ls"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NAdqrq2kpJnI","executionInfo":{"status":"ok","timestamp":1740352631449,"user_tz":360,"elapsed":19543,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"94478161-f445-49b7-b6e8-07b6095d90d1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n","Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.26.4)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.13.1)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.5.0)\n"]}],"source":["!pip install --upgrade scikit-learn\n","import pandas as pd\n","from scipy.stats import pearsonr, spearmanr\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import numpy as np"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7F1FcmM4oezh"},"outputs":[],"source":["train_categorical = pd.read_csv('TRAIN_CATEGORICAL_METADATA.xlsx - training_combined.csv')\n","train_functional = pd.read_csv('TRAIN_FUNCTIONAL_CONNECTOME_MATRICES.csv')\n","training_quantitative = pd.read_csv('TRAIN_QUANTITATIVE_METADATA.xlsx - training_combined.csv')\n","training_solutions = pd.read_csv('TRAINING_SOLUTIONS.xlsx - training_combined.csv')"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":164,"status":"ok","timestamp":1740352682560,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"bJhcGNmh9Pbd","colab":{"base_uri":"https://localhost:8080/","height":226},"outputId":"d09c792e-fee6-40c4-c6f9-b1a08e52f89f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  participant_id  Basic_Demos_Enroll_Year  Basic_Demos_Study_Site  \\\n","0   UmrK0vMLopoR                     2016                       1   \n","1   CPaeQkhcjg7d                     2019                       3   \n","2   Nb4EetVPm3gs                     2016                       1   \n","3   p4vPhVu91o4b                     2018                       3   \n","4   M09PXs7arQ5E                     2019                       3   \n","\n","   PreInt_Demos_Fam_Child_Ethnicity  PreInt_Demos_Fam_Child_Race  \\\n","0                               0.0                            0   \n","1                               1.0                            2   \n","2                               1.0                            8   \n","3                               0.0                            8   \n","4                               0.0                            1   \n","\n","   MRI_Track_Scan_Location  Barratt_Barratt_P1_Edu  Barratt_Barratt_P1_Occ  \\\n","0                        1                      21                      45   \n","1                        3                      15                      15   \n","2                        1                      18                      40   \n","3                        3                      15                      30   \n","4                        3                      15                      20   \n","\n","   Barratt_Barratt_P2_Edu  Barratt_Barratt_P2_Occ  \n","0                      21                      45  \n","1                       0                       0  \n","2                       0                       0  \n","3                      18                       0  \n","4                       0                       0  "],"text/html":["\n","  <div id=\"df-70956e2e-27df-474b-898a-32257c8ec92f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>participant_id</th>\n","      <th>Basic_Demos_Enroll_Year</th>\n","      <th>Basic_Demos_Study_Site</th>\n","      <th>PreInt_Demos_Fam_Child_Ethnicity</th>\n","      <th>PreInt_Demos_Fam_Child_Race</th>\n","      <th>MRI_Track_Scan_Location</th>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <th>Barratt_Barratt_P2_Edu</th>\n","      <th>Barratt_Barratt_P2_Occ</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>UmrK0vMLopoR</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>21</td>\n","      <td>45</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CPaeQkhcjg7d</td>\n","      <td>2019</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nb4EetVPm3gs</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>p4vPhVu91o4b</td>\n","      <td>2018</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>30</td>\n","      <td>18</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M09PXs7arQ5E</td>\n","      <td>2019</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70956e2e-27df-474b-898a-32257c8ec92f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-70956e2e-27df-474b-898a-32257c8ec92f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-70956e2e-27df-474b-898a-32257c8ec92f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-694d07a5-5445-4a8a-8c6a-cf6d884637d5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-694d07a5-5445-4a8a-8c6a-cf6d884637d5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-694d07a5-5445-4a8a-8c6a-cf6d884637d5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_categorical","summary":"{\n  \"name\": \"train_categorical\",\n  \"rows\": 1213,\n  \"fields\": [\n    {\n      \"column\": \"participant_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1213,\n        \"samples\": [\n          \"M6malGe8P7Ic\",\n          \"XBAesR0BxzjQ\",\n          \"PtxdLLjvEhIS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Basic_Demos_Enroll_Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2015,\n        \"max\": 2020,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2016,\n          2019,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Basic_Demos_Study_Site\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreInt_Demos_Fam_Child_Ethnicity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6874700198858595,\n        \"min\": 0.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0,\n          2.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreInt_Demos_Fam_Child_Race\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 11,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          11,\n          2,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MRI_Track_Scan_Location\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Barratt_Barratt_P1_Edu\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 21,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15,\n          0,\n          21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Barratt_Barratt_P1_Occ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 0,\n        \"max\": 45,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          35,\n          15,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Barratt_Barratt_P2_Edu\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 0,\n        \"max\": 21,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0,\n          9,\n          21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Barratt_Barratt_P2_Occ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 0,\n        \"max\": 45,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          25,\n          0,\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}],"source":["train_categorical.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":109,"status":"ok","timestamp":1740352682778,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"RrR7xSOF9RDH","colab":{"base_uri":"https://localhost:8080/","height":226},"outputId":"f6f2f6e6-2fd9-4093-a502-569e80f3ad83"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  participant_id  EHQ_EHQ_Total  ColorVision_CV_Score  APQ_P_APQ_P_CP  \\\n","0   UmrK0vMLopoR          40.00                    13               3   \n","1   CPaeQkhcjg7d         -94.47                    14               3   \n","2   Nb4EetVPm3gs         -46.67                    14               4   \n","3   p4vPhVu91o4b         -26.68                    10               5   \n","4   M09PXs7arQ5E           0.00                    14               5   \n","\n","   APQ_P_APQ_P_ID  APQ_P_APQ_P_INV  APQ_P_APQ_P_OPD  APQ_P_APQ_P_PM  \\\n","0              10               47               13              11   \n","1              13               34               18              23   \n","2              10               35               16              10   \n","3              12               39               19              16   \n","4              15               40               20              24   \n","\n","   APQ_P_APQ_P_PP  SDQ_SDQ_Conduct_Problems  SDQ_SDQ_Difficulties_Total  \\\n","0              28                         0                           6   \n","1              30                         0                          18   \n","2              29                         1                          14   \n","3              28                         6                          24   \n","4              28                         1                          18   \n","\n","   SDQ_SDQ_Emotional_Problems  SDQ_SDQ_Externalizing  \\\n","0                           1                      5   \n","1                           6                      8   \n","2                           2                      8   \n","3                           4                     16   \n","4                           4                     11   \n","\n","   SDQ_SDQ_Generating_Impact  SDQ_SDQ_Hyperactivity  SDQ_SDQ_Internalizing  \\\n","0                          0                      5                      1   \n","1                          7                      8                     10   \n","2                          5                      7                      6   \n","3                          9                     10                      8   \n","4                          4                     10                      7   \n","\n","   SDQ_SDQ_Peer_Problems  SDQ_SDQ_Prosocial  MRI_Track_Age_at_Scan  \n","0                      0                 10                    NaN  \n","1                      4                  5                    NaN  \n","2                      4                  9               8.239904  \n","3                      4                  6                    NaN  \n","4                      3                  9               8.940679  "],"text/html":["\n","  <div id=\"df-3aa8c64f-6f4c-4e7c-b390-798af6077763\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>participant_id</th>\n","      <th>EHQ_EHQ_Total</th>\n","      <th>ColorVision_CV_Score</th>\n","      <th>APQ_P_APQ_P_CP</th>\n","      <th>APQ_P_APQ_P_ID</th>\n","      <th>APQ_P_APQ_P_INV</th>\n","      <th>APQ_P_APQ_P_OPD</th>\n","      <th>APQ_P_APQ_P_PM</th>\n","      <th>APQ_P_APQ_P_PP</th>\n","      <th>SDQ_SDQ_Conduct_Problems</th>\n","      <th>SDQ_SDQ_Difficulties_Total</th>\n","      <th>SDQ_SDQ_Emotional_Problems</th>\n","      <th>SDQ_SDQ_Externalizing</th>\n","      <th>SDQ_SDQ_Generating_Impact</th>\n","      <th>SDQ_SDQ_Hyperactivity</th>\n","      <th>SDQ_SDQ_Internalizing</th>\n","      <th>SDQ_SDQ_Peer_Problems</th>\n","      <th>SDQ_SDQ_Prosocial</th>\n","      <th>MRI_Track_Age_at_Scan</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>UmrK0vMLopoR</td>\n","      <td>40.00</td>\n","      <td>13</td>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>47</td>\n","      <td>13</td>\n","      <td>11</td>\n","      <td>28</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CPaeQkhcjg7d</td>\n","      <td>-94.47</td>\n","      <td>14</td>\n","      <td>3</td>\n","      <td>13</td>\n","      <td>34</td>\n","      <td>18</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>0</td>\n","      <td>18</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>7</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nb4EetVPm3gs</td>\n","      <td>-46.67</td>\n","      <td>14</td>\n","      <td>4</td>\n","      <td>10</td>\n","      <td>35</td>\n","      <td>16</td>\n","      <td>10</td>\n","      <td>29</td>\n","      <td>1</td>\n","      <td>14</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>8.239904</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>p4vPhVu91o4b</td>\n","      <td>-26.68</td>\n","      <td>10</td>\n","      <td>5</td>\n","      <td>12</td>\n","      <td>39</td>\n","      <td>19</td>\n","      <td>16</td>\n","      <td>28</td>\n","      <td>6</td>\n","      <td>24</td>\n","      <td>4</td>\n","      <td>16</td>\n","      <td>9</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M09PXs7arQ5E</td>\n","      <td>0.00</td>\n","      <td>14</td>\n","      <td>5</td>\n","      <td>15</td>\n","      <td>40</td>\n","      <td>20</td>\n","      <td>24</td>\n","      <td>28</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>4</td>\n","      <td>10</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>9</td>\n","      <td>8.940679</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3aa8c64f-6f4c-4e7c-b390-798af6077763')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3aa8c64f-6f4c-4e7c-b390-798af6077763 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3aa8c64f-6f4c-4e7c-b390-798af6077763');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8d839c3a-3a55-4b24-b735-56c0a4ab287c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d839c3a-3a55-4b24-b735-56c0a4ab287c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8d839c3a-3a55-4b24-b735-56c0a4ab287c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"training_quantitative","summary":"{\n  \"name\": \"training_quantitative\",\n  \"rows\": 1213,\n  \"fields\": [\n    {\n      \"column\": \"participant_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1213,\n        \"samples\": [\n          \"M6malGe8P7Ic\",\n          \"XBAesR0BxzjQ\",\n          \"PtxdLLjvEhIS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EHQ_EHQ_Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.8555006802299,\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 158,\n        \"samples\": [\n          -3.34,\n          -64.47,\n          62.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ColorVision_CV_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 14,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          9,\n          11,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"APQ_P_APQ_P_CP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 12,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          8,\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"APQ_P_APQ_P_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 28,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          10,\n          20,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"APQ_P_APQ_P_INV\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 50,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          37,\n          42,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"APQ_P_APQ_P_OPD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 28,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          13,\n          26,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"APQ_P_APQ_P_PM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 0,\n        \"max\": 37,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          9,\n          13,\n          29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"APQ_P_APQ_P_PP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 30,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          28,\n          30,\n          26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SDQ_SDQ_Conduct_Problems\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          5,\n          0,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SDQ_SDQ_Difficulties_Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 34,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          22,\n          20,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SDQ_SDQ_Emotional_Problems\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          3,\n          1,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SDQ_SDQ_Externalizing\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 0,\n        \"max\": 20,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          5,\n          18,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SDQ_SDQ_Generating_Impact\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          1,\n          0,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SDQ_SDQ_Hyperactivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SDQ_SDQ_Internalizing\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 17,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1,\n          10,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SDQ_SDQ_Peer_Problems\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          7,\n          4,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SDQ_SDQ_Prosocial\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          7,\n          10,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MRI_Track_Age_at_Scan\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.234372258813215,\n        \"min\": 0.0,\n        \"max\": 21.564453,\n        \"num_unique_values\": 838,\n        \"samples\": [\n          8.327287,\n          11.218571,\n          16.682979\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}],"source":["training_quantitative.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":27,"status":"ok","timestamp":1740352682805,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"fF_QRdfBxUAa","colab":{"base_uri":"https://localhost:8080/","height":444},"outputId":"f3fc9523-2705-4cc1-bbab-5cf856c375e6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     participant_id  Basic_Demos_Enroll_Year  Basic_Demos_Study_Site  \\\n","0      UmrK0vMLopoR                     2016                       1   \n","1      CPaeQkhcjg7d                     2019                       3   \n","2      Nb4EetVPm3gs                     2016                       1   \n","3      p4vPhVu91o4b                     2018                       3   \n","4      M09PXs7arQ5E                     2019                       3   \n","...             ...                      ...                     ...   \n","1208   Atx7oub96GXS                     2019                       1   \n","1209   groSbUfkQngM                     2016                       1   \n","1210   zmxGvIrOD0bt                     2015                       1   \n","1211   rOmWFuJCud5G                     2018                       3   \n","1212   k8HhHnnu2wmt                     2018                       3   \n","\n","      PreInt_Demos_Fam_Child_Ethnicity  PreInt_Demos_Fam_Child_Race  \\\n","0                                  0.0                            0   \n","1                                  1.0                            2   \n","2                                  1.0                            8   \n","3                                  0.0                            8   \n","4                                  0.0                            1   \n","...                                ...                          ...   \n","1208                               0.0                            0   \n","1209                               0.0                            0   \n","1210                               1.0                            2   \n","1211                               0.0                            8   \n","1212                               1.0                            2   \n","\n","      MRI_Track_Scan_Location  Barratt_Barratt_P1_Edu  Barratt_Barratt_P1_Occ  \\\n","0                           1                      21                      45   \n","1                           3                      15                      15   \n","2                           1                      18                      40   \n","3                           3                      15                      30   \n","4                           3                      15                      20   \n","...                       ...                     ...                     ...   \n","1208                        2                      21                      40   \n","1209                        1                      18                      35   \n","1210                        1                      18                      20   \n","1211                        3                      21                      40   \n","1212                        2                      21                      40   \n","\n","      Barratt_Barratt_P2_Edu  Barratt_Barratt_P2_Occ  ...  \\\n","0                         21                      45  ...   \n","1                          0                       0  ...   \n","2                          0                       0  ...   \n","3                         18                       0  ...   \n","4                          0                       0  ...   \n","...                      ...                     ...  ...   \n","1208                      21                      40  ...   \n","1209                       0                       0  ...   \n","1210                       0                       0  ...   \n","1211                      18                      45  ...   \n","1212                      18                      45  ...   \n","\n","      SDQ_SDQ_Conduct_Problems  SDQ_SDQ_Difficulties_Total  \\\n","0                            0                           6   \n","1                            0                          18   \n","2                            1                          14   \n","3                            6                          24   \n","4                            1                          18   \n","...                        ...                         ...   \n","1208                         1                           9   \n","1209                         6                          18   \n","1210                         3                           4   \n","1211                         4                           9   \n","1212                         3                          12   \n","\n","      SDQ_SDQ_Emotional_Problems  SDQ_SDQ_Externalizing  \\\n","0                              1                      5   \n","1                              6                      8   \n","2                              2                      8   \n","3                              4                     16   \n","4                              4                     11   \n","...                          ...                    ...   \n","1208                           2                      7   \n","1209                           3                     11   \n","1210                           1                      3   \n","1211                           0                      9   \n","1212                           0                     12   \n","\n","      SDQ_SDQ_Generating_Impact  SDQ_SDQ_Hyperactivity  SDQ_SDQ_Internalizing  \\\n","0                             0                      5                      1   \n","1                             7                      8                     10   \n","2                             5                      7                      6   \n","3                             9                     10                      8   \n","4                             4                     10                      7   \n","...                         ...                    ...                    ...   \n","1208                          3                      6                      2   \n","1209                          9                      5                      7   \n","1210                          0                      0                      1   \n","1211                          3                      5                      0   \n","1212                          6                      9                      0   \n","\n","      SDQ_SDQ_Peer_Problems  SDQ_SDQ_Prosocial  MRI_Track_Age_at_Scan  \n","0                         0                 10                    NaN  \n","1                         4                  5                    NaN  \n","2                         4                  9               8.239904  \n","3                         4                  6                    NaN  \n","4                         3                  9               8.940679  \n","...                     ...                ...                    ...  \n","1208                      0                  9              10.697923  \n","1209                      4                  7              13.964750  \n","1210                      0                 10                    NaN  \n","1211                      0                  9              12.089094  \n","1212                      0                  8              12.595710  \n","\n","[1213 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-5e6e2fea-cc12-4d27-834b-c1e288336186\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>participant_id</th>\n","      <th>Basic_Demos_Enroll_Year</th>\n","      <th>Basic_Demos_Study_Site</th>\n","      <th>PreInt_Demos_Fam_Child_Ethnicity</th>\n","      <th>PreInt_Demos_Fam_Child_Race</th>\n","      <th>MRI_Track_Scan_Location</th>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <th>Barratt_Barratt_P2_Edu</th>\n","      <th>Barratt_Barratt_P2_Occ</th>\n","      <th>...</th>\n","      <th>SDQ_SDQ_Conduct_Problems</th>\n","      <th>SDQ_SDQ_Difficulties_Total</th>\n","      <th>SDQ_SDQ_Emotional_Problems</th>\n","      <th>SDQ_SDQ_Externalizing</th>\n","      <th>SDQ_SDQ_Generating_Impact</th>\n","      <th>SDQ_SDQ_Hyperactivity</th>\n","      <th>SDQ_SDQ_Internalizing</th>\n","      <th>SDQ_SDQ_Peer_Problems</th>\n","      <th>SDQ_SDQ_Prosocial</th>\n","      <th>MRI_Track_Age_at_Scan</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>UmrK0vMLopoR</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CPaeQkhcjg7d</td>\n","      <td>2019</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>18</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>7</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nb4EetVPm3gs</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>14</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>8.239904</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>p4vPhVu91o4b</td>\n","      <td>2018</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>30</td>\n","      <td>18</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>6</td>\n","      <td>24</td>\n","      <td>4</td>\n","      <td>16</td>\n","      <td>9</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M09PXs7arQ5E</td>\n","      <td>2019</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>4</td>\n","      <td>10</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>9</td>\n","      <td>8.940679</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>Atx7oub96GXS</td>\n","      <td>2019</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>9</td>\n","      <td>2</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>10.697923</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>groSbUfkQngM</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>6</td>\n","      <td>18</td>\n","      <td>3</td>\n","      <td>11</td>\n","      <td>9</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>7</td>\n","      <td>13.964750</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>zmxGvIrOD0bt</td>\n","      <td>2015</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>rOmWFuJCud5G</td>\n","      <td>2018</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>...</td>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>12.089094</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>k8HhHnnu2wmt</td>\n","      <td>2018</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>12.595710</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1213 rows × 28 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5e6e2fea-cc12-4d27-834b-c1e288336186')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5e6e2fea-cc12-4d27-834b-c1e288336186 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5e6e2fea-cc12-4d27-834b-c1e288336186');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-329b94cb-c439-41b7-a278-dfbee02e8cea\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-329b94cb-c439-41b7-a278-dfbee02e8cea')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-329b94cb-c439-41b7-a278-dfbee02e8cea button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f921ff7b-f60c-4fd3-b3b7-3f55cfab254e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_cat_and_quant')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f921ff7b-f60c-4fd3-b3b7-3f55cfab254e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_cat_and_quant');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_cat_and_quant"}},"metadata":{},"execution_count":8}],"source":["train_cat_and_quant = train_categorical.join(training_quantitative.set_index('participant_id'), on='participant_id')\n","train_cat_and_quant"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":318,"status":"ok","timestamp":1740352683124,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"UdcGVD8gmnTZ","colab":{"base_uri":"https://localhost:8080/","height":444},"outputId":"67fb236b-33e7-464f-b866-c55062fba46e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     participant_id  Basic_Demos_Enroll_Year  Basic_Demos_Study_Site  \\\n","0      UmrK0vMLopoR                     2016                       1   \n","1      CPaeQkhcjg7d                     2019                       3   \n","2      Nb4EetVPm3gs                     2016                       1   \n","3      p4vPhVu91o4b                     2018                       3   \n","4      M09PXs7arQ5E                     2019                       3   \n","...             ...                      ...                     ...   \n","1208   Atx7oub96GXS                     2019                       1   \n","1209   groSbUfkQngM                     2016                       1   \n","1210   zmxGvIrOD0bt                     2015                       1   \n","1211   rOmWFuJCud5G                     2018                       3   \n","1212   k8HhHnnu2wmt                     2018                       3   \n","\n","      PreInt_Demos_Fam_Child_Ethnicity  PreInt_Demos_Fam_Child_Race  \\\n","0                                  0.0                            0   \n","1                                  1.0                            2   \n","2                                  1.0                            8   \n","3                                  0.0                            8   \n","4                                  0.0                            1   \n","...                                ...                          ...   \n","1208                               0.0                            0   \n","1209                               0.0                            0   \n","1210                               1.0                            2   \n","1211                               0.0                            8   \n","1212                               1.0                            2   \n","\n","      MRI_Track_Scan_Location  Barratt_Barratt_P1_Edu  Barratt_Barratt_P1_Occ  \\\n","0                           1                      21                      45   \n","1                           3                      15                      15   \n","2                           1                      18                      40   \n","3                           3                      15                      30   \n","4                           3                      15                      20   \n","...                       ...                     ...                     ...   \n","1208                        2                      21                      40   \n","1209                        1                      18                      35   \n","1210                        1                      18                      20   \n","1211                        3                      21                      40   \n","1212                        2                      21                      40   \n","\n","      Barratt_Barratt_P2_Edu  Barratt_Barratt_P2_Occ  ...  \\\n","0                         21                      45  ...   \n","1                          0                       0  ...   \n","2                          0                       0  ...   \n","3                         18                       0  ...   \n","4                          0                       0  ...   \n","...                      ...                     ...  ...   \n","1208                      21                      40  ...   \n","1209                       0                       0  ...   \n","1210                       0                       0  ...   \n","1211                      18                      45  ...   \n","1212                      18                      45  ...   \n","\n","      195throw_196thcolumn  195throw_197thcolumn  195throw_198thcolumn  \\\n","0                -0.037630             -0.072599             -0.058396   \n","1                 0.014106             -0.001084             -0.025624   \n","2                -0.040456              0.018640              0.010771   \n","3                -0.016356              0.025618             -0.007152   \n","4                -0.056285             -0.031508             -0.010196   \n","...                    ...                   ...                   ...   \n","1208             -0.038566             -0.032095              0.030852   \n","1209              0.015339             -0.028994             -0.096499   \n","1210             -0.032479              0.079623             -0.058516   \n","1211             -0.012197              0.065225              0.035906   \n","1212             -0.026979              0.013066             -0.061029   \n","\n","      195throw_199thcolumn  196throw_197thcolumn  196throw_198thcolumn  \\\n","0                -0.041544              0.142806             -0.006377   \n","1                -0.031863              0.162011              0.067439   \n","2                -0.044341              0.128386              0.047282   \n","3                 0.032584              0.121726              0.045089   \n","4                 0.035638              0.074978              0.030579   \n","...                    ...                   ...                   ...   \n","1208             -0.009849              0.213448              0.101271   \n","1209              0.075038              0.050760              0.103528   \n","1210             -0.030533              0.103685              0.005338   \n","1211              0.027778              0.059302              0.047181   \n","1212              0.117004              0.162324              0.003006   \n","\n","      196throw_199thcolumn  197throw_198thcolumn  197throw_199thcolumn  \\\n","0                 0.108005              0.148327              0.093230   \n","1                 0.017155              0.088893              0.064094   \n","2                 0.087678              0.146221             -0.009425   \n","3                 0.154464              0.106817              0.065336   \n","4                 0.025640              0.118199              0.112522   \n","...                    ...                   ...                   ...   \n","1208              0.054290              0.101367              0.159979   \n","1209              0.093136             -0.029158              0.084720   \n","1210              0.051195              0.051761              0.010093   \n","1211              0.093942              0.115655              0.106790   \n","1212             -0.029927             -0.017830              0.062416   \n","\n","      198throw_199thcolumn  \n","0                -0.004984  \n","1                 0.194381  \n","2                 0.035150  \n","3                 0.234708  \n","4                 0.143666  \n","...                    ...  \n","1208              0.149812  \n","1209              0.135419  \n","1210              0.117584  \n","1211              0.117870  \n","1212              0.161122  \n","\n","[1213 rows x 19928 columns]"],"text/html":["\n","  <div id=\"df-3c3703ca-83f1-402b-8a3f-008f9d026349\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>participant_id</th>\n","      <th>Basic_Demos_Enroll_Year</th>\n","      <th>Basic_Demos_Study_Site</th>\n","      <th>PreInt_Demos_Fam_Child_Ethnicity</th>\n","      <th>PreInt_Demos_Fam_Child_Race</th>\n","      <th>MRI_Track_Scan_Location</th>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <th>Barratt_Barratt_P2_Edu</th>\n","      <th>Barratt_Barratt_P2_Occ</th>\n","      <th>...</th>\n","      <th>195throw_196thcolumn</th>\n","      <th>195throw_197thcolumn</th>\n","      <th>195throw_198thcolumn</th>\n","      <th>195throw_199thcolumn</th>\n","      <th>196throw_197thcolumn</th>\n","      <th>196throw_198thcolumn</th>\n","      <th>196throw_199thcolumn</th>\n","      <th>197throw_198thcolumn</th>\n","      <th>197throw_199thcolumn</th>\n","      <th>198throw_199thcolumn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>UmrK0vMLopoR</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>...</td>\n","      <td>-0.037630</td>\n","      <td>-0.072599</td>\n","      <td>-0.058396</td>\n","      <td>-0.041544</td>\n","      <td>0.142806</td>\n","      <td>-0.006377</td>\n","      <td>0.108005</td>\n","      <td>0.148327</td>\n","      <td>0.093230</td>\n","      <td>-0.004984</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CPaeQkhcjg7d</td>\n","      <td>2019</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.014106</td>\n","      <td>-0.001084</td>\n","      <td>-0.025624</td>\n","      <td>-0.031863</td>\n","      <td>0.162011</td>\n","      <td>0.067439</td>\n","      <td>0.017155</td>\n","      <td>0.088893</td>\n","      <td>0.064094</td>\n","      <td>0.194381</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nb4EetVPm3gs</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>-0.040456</td>\n","      <td>0.018640</td>\n","      <td>0.010771</td>\n","      <td>-0.044341</td>\n","      <td>0.128386</td>\n","      <td>0.047282</td>\n","      <td>0.087678</td>\n","      <td>0.146221</td>\n","      <td>-0.009425</td>\n","      <td>0.035150</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>p4vPhVu91o4b</td>\n","      <td>2018</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>30</td>\n","      <td>18</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>-0.016356</td>\n","      <td>0.025618</td>\n","      <td>-0.007152</td>\n","      <td>0.032584</td>\n","      <td>0.121726</td>\n","      <td>0.045089</td>\n","      <td>0.154464</td>\n","      <td>0.106817</td>\n","      <td>0.065336</td>\n","      <td>0.234708</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M09PXs7arQ5E</td>\n","      <td>2019</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>-0.056285</td>\n","      <td>-0.031508</td>\n","      <td>-0.010196</td>\n","      <td>0.035638</td>\n","      <td>0.074978</td>\n","      <td>0.030579</td>\n","      <td>0.025640</td>\n","      <td>0.118199</td>\n","      <td>0.112522</td>\n","      <td>0.143666</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>Atx7oub96GXS</td>\n","      <td>2019</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>...</td>\n","      <td>-0.038566</td>\n","      <td>-0.032095</td>\n","      <td>0.030852</td>\n","      <td>-0.009849</td>\n","      <td>0.213448</td>\n","      <td>0.101271</td>\n","      <td>0.054290</td>\n","      <td>0.101367</td>\n","      <td>0.159979</td>\n","      <td>0.149812</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>groSbUfkQngM</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.015339</td>\n","      <td>-0.028994</td>\n","      <td>-0.096499</td>\n","      <td>0.075038</td>\n","      <td>0.050760</td>\n","      <td>0.103528</td>\n","      <td>0.093136</td>\n","      <td>-0.029158</td>\n","      <td>0.084720</td>\n","      <td>0.135419</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>zmxGvIrOD0bt</td>\n","      <td>2015</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>-0.032479</td>\n","      <td>0.079623</td>\n","      <td>-0.058516</td>\n","      <td>-0.030533</td>\n","      <td>0.103685</td>\n","      <td>0.005338</td>\n","      <td>0.051195</td>\n","      <td>0.051761</td>\n","      <td>0.010093</td>\n","      <td>0.117584</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>rOmWFuJCud5G</td>\n","      <td>2018</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>...</td>\n","      <td>-0.012197</td>\n","      <td>0.065225</td>\n","      <td>0.035906</td>\n","      <td>0.027778</td>\n","      <td>0.059302</td>\n","      <td>0.047181</td>\n","      <td>0.093942</td>\n","      <td>0.115655</td>\n","      <td>0.106790</td>\n","      <td>0.117870</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>k8HhHnnu2wmt</td>\n","      <td>2018</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>...</td>\n","      <td>-0.026979</td>\n","      <td>0.013066</td>\n","      <td>-0.061029</td>\n","      <td>0.117004</td>\n","      <td>0.162324</td>\n","      <td>0.003006</td>\n","      <td>-0.029927</td>\n","      <td>-0.017830</td>\n","      <td>0.062416</td>\n","      <td>0.161122</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1213 rows × 19928 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c3703ca-83f1-402b-8a3f-008f9d026349')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3c3703ca-83f1-402b-8a3f-008f9d026349 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3c3703ca-83f1-402b-8a3f-008f9d026349');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b96e1a9e-0f81-4375-b01a-9bde49873166\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b96e1a9e-0f81-4375-b01a-9bde49873166')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b96e1a9e-0f81-4375-b01a-9bde49873166 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9dd6bc8f-358c-4da2-af93-28d17ebca51e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_total')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9dd6bc8f-358c-4da2-af93-28d17ebca51e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_total');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_total"}},"metadata":{},"execution_count":9}],"source":["train_total = train_cat_and_quant.join(train_functional.set_index('participant_id'), on='participant_id')\n","train_total"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":9205,"status":"ok","timestamp":1740352692331,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"ei0rgyxO2oIs","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e887ee9a-489d-4c6e-d980-2c9b59cea3db"},"outputs":[{"output_type":"stream","name":"stdout","text":["PreInt_Demos_Fam_Child_Ethnicity\n","MRI_Track_Age_at_Scan\n"]}],"source":["for col in train_total.columns:\n","  if train_total[col].isnull().sum() > 0:\n","    print(col)"]},{"cell_type":"markdown","metadata":{"id":"AZPabSE2Nl6r"},"source":["## **Categorical Columns Data Cleaning**"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":30,"status":"ok","timestamp":1740352692363,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"2zMelLG_4Deb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5893f6db-9170-473d-b4ec-09e63cb27c1d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["11"]},"metadata":{},"execution_count":11}],"source":["train_total['PreInt_Demos_Fam_Child_Ethnicity'].isnull().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":39,"status":"ok","timestamp":1740352692403,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"1_1XBX0TZ8V_","colab":{"base_uri":"https://localhost:8080/","height":241},"outputId":"f26fab8e-c919-46ee-8774-a421c8e06e95"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["PreInt_Demos_Fam_Child_Ethnicity\n","0.0    809\n","1.0    296\n","2.0     77\n","3.0     20\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>PreInt_Demos_Fam_Child_Ethnicity</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0.0</th>\n","      <td>809</td>\n","    </tr>\n","    <tr>\n","      <th>1.0</th>\n","      <td>296</td>\n","    </tr>\n","    <tr>\n","      <th>2.0</th>\n","      <td>77</td>\n","    </tr>\n","    <tr>\n","      <th>3.0</th>\n","      <td>20</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":12}],"source":["train_total['PreInt_Demos_Fam_Child_Ethnicity'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":30,"status":"ok","timestamp":1740352692431,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"aoRsIPc6Z_Io","colab":{"base_uri":"https://localhost:8080/","height":429},"outputId":"830ad2de-86c7-497a-bd74-cd783892ded4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["PreInt_Demos_Fam_Child_Race\n","0     627\n","8     195\n","1     181\n","2     128\n","3      30\n","9      23\n","10     11\n","4      10\n","11      6\n","7       2\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>PreInt_Demos_Fam_Child_Race</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>627</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>195</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>181</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>128</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":13}],"source":["train_total['PreInt_Demos_Fam_Child_Race'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":48,"status":"ok","timestamp":1740352692478,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"sXaeeZW45CcH","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7c02aeb2-0890-4f67-dec8-5d78f6d6ddb9"},"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","PreInt_Demos_Fam_Child_Ethnicity\n","0.0    809\n","1.0    296\n","2.0     77\n","3.0     31\n","Name: count, dtype: int64\n"]}],"source":["train_total.loc[train_total['PreInt_Demos_Fam_Child_Ethnicity'].isna(), ['PreInt_Demos_Fam_Child_Ethnicity']] = 3.0\n","print(train_total['PreInt_Demos_Fam_Child_Ethnicity'].isnull().sum())\n","print(train_total['PreInt_Demos_Fam_Child_Ethnicity'].value_counts())"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":55,"status":"ok","timestamp":1740352692596,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"SFjEFK2u-KMP","colab":{"base_uri":"https://localhost:8080/","height":241},"outputId":"878b03ba-9314-4cd6-ed0b-70d9145115f6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Basic_Demos_Study_Site\n","1    652\n","3    430\n","4    120\n","2     11\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Basic_Demos_Study_Site</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>652</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>430</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>120</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>11</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":15}],"source":["train_total['Basic_Demos_Study_Site'].value_counts() # no 5s -- should be fine since it doesn't look like SI RUMC is actually used"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1740352692600,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"wB3Gn18M-qur","colab":{"base_uri":"https://localhost:8080/","height":241},"outputId":"89f607c4-33cb-4b7b-c8e4-4729b61ca106"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["PreInt_Demos_Fam_Child_Ethnicity\n","0.0    809\n","1.0    296\n","2.0     77\n","3.0     31\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>PreInt_Demos_Fam_Child_Ethnicity</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0.0</th>\n","      <td>809</td>\n","    </tr>\n","    <tr>\n","      <th>1.0</th>\n","      <td>296</td>\n","    </tr>\n","    <tr>\n","      <th>2.0</th>\n","      <td>77</td>\n","    </tr>\n","    <tr>\n","      <th>3.0</th>\n","      <td>31</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":16}],"source":["train_total['PreInt_Demos_Fam_Child_Ethnicity'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":149,"status":"ok","timestamp":1740352692750,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"P0E2uYOn_DSB","colab":{"base_uri":"https://localhost:8080/","height":429},"outputId":"14cf71af-c4d0-43f9-8820-00b4ab08c07a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["PreInt_Demos_Fam_Child_Race\n","0     627\n","8     195\n","1     181\n","2     128\n","3      30\n","9      23\n","10     11\n","4      10\n","11      6\n","7       2\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>PreInt_Demos_Fam_Child_Race</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>627</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>195</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>181</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>128</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":17}],"source":["train_total['PreInt_Demos_Fam_Child_Race'].value_counts() # No 5s, 6s -- thinking of making synthetic data, but may be tough to fake MRI scan data"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":86,"status":"ok","timestamp":1740352692751,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"ccxUcHD1_kOW","colab":{"base_uri":"https://localhost:8080/","height":272},"outputId":"3e2ed1f0-ebd0-4851-dc9d-793972be1d45"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["MRI_Track_Scan_Location\n","2    532\n","3    463\n","1    179\n","4     36\n","0      3\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>MRI_Track_Scan_Location</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>532</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>463</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>179</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>36</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":18}],"source":["train_total['MRI_Track_Scan_Location'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":1041,"status":"ok","timestamp":1740352693709,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"Xto1Ql3QV3No","colab":{"base_uri":"https://localhost:8080/","height":424},"outputId":"b63e1022-e4ed-44aa-8dd5-64b55808e13f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      ADHD_Outcome  Sex_F participant_id\n","0                1      1   UmrK0vMLopoR\n","1                1      0   CPaeQkhcjg7d\n","2                1      0   Nb4EetVPm3gs\n","3                1      1   p4vPhVu91o4b\n","4                1      1   M09PXs7arQ5E\n","...            ...    ...            ...\n","1208             0      0   Atx7oub96GXS\n","1209             0      1   groSbUfkQngM\n","1210             0      1   zmxGvIrOD0bt\n","1211             0      0   rOmWFuJCud5G\n","1212             0      0   k8HhHnnu2wmt\n","\n","[1210 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-ade99564-b6ad-4a87-9f19-d61985dfa712\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ADHD_Outcome</th>\n","      <th>Sex_F</th>\n","      <th>participant_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>UmrK0vMLopoR</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>CPaeQkhcjg7d</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Nb4EetVPm3gs</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>p4vPhVu91o4b</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>M09PXs7arQ5E</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Atx7oub96GXS</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>groSbUfkQngM</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>zmxGvIrOD0bt</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>rOmWFuJCud5G</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>k8HhHnnu2wmt</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ade99564-b6ad-4a87-9f19-d61985dfa712')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ade99564-b6ad-4a87-9f19-d61985dfa712 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ade99564-b6ad-4a87-9f19-d61985dfa712');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-29458b6a-ddf7-4069-b1e2-001bd750ae4b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29458b6a-ddf7-4069-b1e2-001bd750ae4b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-29458b6a-ddf7-4069-b1e2-001bd750ae4b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_3779e9ab-a4d4-4da5-bd1c-e08ca248fe0c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('training_solutions')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_3779e9ab-a4d4-4da5-bd1c-e08ca248fe0c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('training_solutions');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"training_solutions","summary":"{\n  \"name\": \"training_solutions\",\n  \"rows\": 1210,\n  \"fields\": [\n    {\n      \"column\": \"ADHD_Outcome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"participant_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1210,\n        \"samples\": [\n          \"CKkgPNyqu2OK\",\n          \"Zy9GTHDxUbXU\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}],"source":["train_total_with_soln = train_total.join(training_solutions.set_index('participant_id'), on='participant_id')\n","train_total_with_soln = train_total_with_soln[train_total_with_soln['MRI_Track_Scan_Location'] != 0] # Instead of deleting, can we replace with a value?\n","train_total = train_total_with_soln.iloc[:, :19928]\n","training_solutions = train_total_with_soln.iloc[:, 19928:]\n","training_solutions = training_solutions.join(train_total[['participant_id']])\n","training_solutions"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":109,"status":"ok","timestamp":1740352693817,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"5CYby7OYAfN1","colab":{"base_uri":"https://localhost:8080/","height":366},"outputId":"6878ff97-8445-44ed-ae5d-a0f1a8a57691"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Barratt_Barratt_P1_Edu\n","21    469\n","18    420\n","15    161\n","12     97\n","9      28\n","0      15\n","6      15\n","3       5\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>21</th>\n","      <td>469</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>420</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>161</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>97</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":20}],"source":["train_total['Barratt_Barratt_P1_Edu'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":77,"status":"ok","timestamp":1740352693895,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"LrYKLTIkBBAJ","colab":{"base_uri":"https://localhost:8080/","height":429},"outputId":"d599c82d-e859-49c2-dd17-11f1d51cc456"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Barratt_Barratt_P1_Occ\n","0     316\n","35    219\n","45    187\n","30    154\n","40    153\n","25     78\n","15     35\n","20     31\n","5      31\n","10      6\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>316</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>219</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>187</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>154</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>153</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>78</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>35</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>31</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>31</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":21}],"source":["train_total['Barratt_Barratt_P1_Occ'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":1760,"status":"ok","timestamp":1740352695804,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"iMbe8OPjDM4H","colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"90bf66cf-8821-45a9-93a7-facce98a25d4"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["ed_to_occ_bar = sns.barplot(x='Barratt_Barratt_P1_Edu', y='Barratt_Barratt_P1_Occ', data=train_total, hue='Barratt_Barratt_P1_Edu',\n","                            palette='muted', err_kws={'color': 'red'})\n","plt.title('Occupation Level of Parent 1 based on Education Level')\n","plt.xlabel('Parent 1 Education Level')\n","plt.ylabel('Parent 1 Occupation Level')\n","handles, labels = ed_to_occ_bar.get_legend_handles_labels()\n","new_labels = ['<7th', '9th', '10th/11th', 'HS Grad', 'Part Clg', 'Clg Ed', 'Grad Deg']\n","ed_to_occ_bar.legend(handles, new_labels, bbox_to_anchor=(1.1, 1.05))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":2052,"status":"ok","timestamp":1740352697855,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"yi4rduyIoHIZ","colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"52b400f5-d4ba-4bef-b1f0-c177cdcd3640"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["occ_to_ed_bar = sns.barplot(x='Barratt_Barratt_P1_Occ', y='Barratt_Barratt_P1_Edu', data=train_total, err_kws={'color': 'blue'},\n","            hue='Barratt_Barratt_P1_Occ', palette='muted',)\n","plt.title('Education Level of Parent 1 based on Occupation Level')\n","plt.xlabel('Parent 1 Occupation Level')\n","plt.ylabel('Parent 1 Education Level')\n","handles, labels = occ_to_ed_bar.get_legend_handles_labels()\n","new_labels = ['At Home', 'Unskilled', 'Semi-Skilled Manual', 'Clerks/Sales/Skilled',\n","              'Skilled/Small Business', 'Intermediate Admin/Professional', 'Lower Exec/Admin/Profesional',\n","              'Upper Admin/Managerial', 'Higher Exec/Professional', 'Elite Exec/Professional']\n","occ_to_ed_bar.legend(handles, new_labels, bbox_to_anchor=(1.1, 1.05))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":38,"status":"ok","timestamp":1740352697892,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"quP9bbSgoiI4","colab":{"base_uri":"https://localhost:8080/","height":520},"outputId":"d0043668-36ba-45b7-8ba8-f976e0100f5c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Barratt_Barratt_P1_Occ\n","63                         0\n","71                         0\n","141                        0\n","180                        0\n","252                        0\n","297                        0\n","372                       25\n","790                        0\n","808                        0\n","835                        0\n","869                        0\n","993                        0\n","1071                       0\n","1078                       0\n","1143                       0"],"text/html":["\n","  <div id=\"df-8ef03b7d-6c96-49ce-8138-4e50d4343582\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>63</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>141</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>180</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>252</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>297</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>372</th>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>790</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>808</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>835</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>869</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>993</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1071</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1078</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1143</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ef03b7d-6c96-49ce-8138-4e50d4343582')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8ef03b7d-6c96-49ce-8138-4e50d4343582 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8ef03b7d-6c96-49ce-8138-4e50d4343582');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8c34e06e-3e7f-4387-84a6-cfb6eadccb77\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8c34e06e-3e7f-4387-84a6-cfb6eadccb77')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8c34e06e-3e7f-4387-84a6-cfb6eadccb77 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"train_total\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"Barratt_Barratt_P1_Occ\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 25,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          25,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}],"source":["train_total.loc[train_total['Barratt_Barratt_P1_Edu'] == 0, ['Barratt_Barratt_P1_Occ']]"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":513,"status":"ok","timestamp":1740352698406,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"cVTF9_OlpYww","colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"1142dc6a-c9f2-4d65-f18e-bb6f9b570c10"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["avg = train_total[['Barratt_Barratt_P1_Edu', 'Barratt_Barratt_P1_Occ']].groupby('Barratt_Barratt_P1_Occ').mean()\n","plt.plot(avg, 'b.-', label='Avg Education Level')\n","plt.xticks([0, 5, 10, 15, 20, 25, 30, 35, 40, 45])\n","plt.yticks([0, 3, 6, 9, 12, 15, 18, 21])\n","plt.xlabel('Parent 1 Occupation Level')\n","plt.ylabel('Average Parent 1 Education Level')\n","plt.legend()\n","plt.title('Average Education Level for Parent 1 per Occupation Level')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1740352698413,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"6hJ_KEYerSRo","colab":{"base_uri":"https://localhost:8080/"},"outputId":"813e6c0d-e4ac-49b2-a584-277008d4361b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation = 0.45649379179284527 P-value = 2.523304651131997e-63\n"]}],"source":["correlation, p_value = spearmanr(train_total['Barratt_Barratt_P1_Edu'], train_total['Barratt_Barratt_P1_Occ'])\n","print(\"Correlation =\", correlation, \"P-value =\", p_value)"]},{"cell_type":"code","source":["avg = train_total[['Barratt_Barratt_P2_Edu', 'Barratt_Barratt_P2_Occ']].groupby('Barratt_Barratt_P2_Occ').mean()\n","plt.plot(avg, 'b.-', label='Avg Education Level')\n","plt.xticks([0, 5, 10, 15, 20, 25, 30, 35, 40, 45])\n","plt.yticks([0, 3, 6, 9, 12, 15, 18, 21])\n","plt.xlabel('Parent 2 Occupation Level')\n","plt.ylabel('Average Parent 2 Education Level')\n","plt.legend()\n","plt.title('Average Education Level for Parent 2 per Occupation Level')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"Q0SF0x67dzQT","executionInfo":{"status":"ok","timestamp":1740352698852,"user_tz":360,"elapsed":402,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"outputId":"bdafcd27-1d20-49bb-c89a-c6f30f6ebd3f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["correlation, p_value = spearmanr(train_total['Barratt_Barratt_P2_Edu'], train_total['Barratt_Barratt_P2_Occ'])\n","print(\"Correlation =\", correlation, \"P-value =\", p_value)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A2-9PfWXd5A7","executionInfo":{"status":"ok","timestamp":1740352698853,"user_tz":360,"elapsed":5,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"outputId":"c179da3f-0c2f-41d8-f79e-bd467dc4eb9c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation = 0.6976963500107158 P-value = 3.4676061185827476e-177\n"]}]},{"cell_type":"code","source":["train_total.loc[train_total['Barratt_Barratt_P1_Edu'].isnull() & train_total['Barratt_Barratt_P1_Occ'].isnull(), ['missing_parent']] = 1.0\n","train_total.loc[train_total['Barratt_Barratt_P2_Edu'].isnull() & train_total['Barratt_Barratt_P2_Occ'].isnull(), ['missing_parent']] = 1.0\n","train_total.loc[train_total['missing_parent'].isnull(), ['missing_parent']] = 0.0\n","train_total.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":256},"id":"ALE-SCKGW34_","executionInfo":{"status":"ok","timestamp":1740352698994,"user_tz":360,"elapsed":142,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"outputId":"81595bb3-db4a-4f83-a4a7-3e8e92fcb879"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  participant_id  Basic_Demos_Enroll_Year  Basic_Demos_Study_Site  \\\n","0   UmrK0vMLopoR                     2016                       1   \n","1   CPaeQkhcjg7d                     2019                       3   \n","2   Nb4EetVPm3gs                     2016                       1   \n","3   p4vPhVu91o4b                     2018                       3   \n","4   M09PXs7arQ5E                     2019                       3   \n","\n","   PreInt_Demos_Fam_Child_Ethnicity  PreInt_Demos_Fam_Child_Race  \\\n","0                               0.0                            0   \n","1                               1.0                            2   \n","2                               1.0                            8   \n","3                               0.0                            8   \n","4                               0.0                            1   \n","\n","   MRI_Track_Scan_Location  Barratt_Barratt_P1_Edu  Barratt_Barratt_P1_Occ  \\\n","0                        1                      21                      45   \n","1                        3                      15                      15   \n","2                        1                      18                      40   \n","3                        3                      15                      30   \n","4                        3                      15                      20   \n","\n","   Barratt_Barratt_P2_Edu  Barratt_Barratt_P2_Occ  ...  195throw_197thcolumn  \\\n","0                      21                      45  ...             -0.072599   \n","1                       0                       0  ...             -0.001084   \n","2                       0                       0  ...              0.018640   \n","3                      18                       0  ...              0.025618   \n","4                       0                       0  ...             -0.031508   \n","\n","   195throw_198thcolumn  195throw_199thcolumn  196throw_197thcolumn  \\\n","0             -0.058396             -0.041544              0.142806   \n","1             -0.025624             -0.031863              0.162011   \n","2              0.010771             -0.044341              0.128386   \n","3             -0.007152              0.032584              0.121726   \n","4             -0.010196              0.035638              0.074978   \n","\n","   196throw_198thcolumn  196throw_199thcolumn  197throw_198thcolumn  \\\n","0             -0.006377              0.108005              0.148327   \n","1              0.067439              0.017155              0.088893   \n","2              0.047282              0.087678              0.146221   \n","3              0.045089              0.154464              0.106817   \n","4              0.030579              0.025640              0.118199   \n","\n","   197throw_199thcolumn  198throw_199thcolumn  missing_parent  \n","0              0.093230             -0.004984             0.0  \n","1              0.064094              0.194381             0.0  \n","2             -0.009425              0.035150             0.0  \n","3              0.065336              0.234708             0.0  \n","4              0.112522              0.143666             0.0  \n","\n","[5 rows x 19929 columns]"],"text/html":["\n","  <div id=\"df-89974ba0-3bac-405e-99c6-84f14a3142fe\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>participant_id</th>\n","      <th>Basic_Demos_Enroll_Year</th>\n","      <th>Basic_Demos_Study_Site</th>\n","      <th>PreInt_Demos_Fam_Child_Ethnicity</th>\n","      <th>PreInt_Demos_Fam_Child_Race</th>\n","      <th>MRI_Track_Scan_Location</th>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <th>Barratt_Barratt_P2_Edu</th>\n","      <th>Barratt_Barratt_P2_Occ</th>\n","      <th>...</th>\n","      <th>195throw_197thcolumn</th>\n","      <th>195throw_198thcolumn</th>\n","      <th>195throw_199thcolumn</th>\n","      <th>196throw_197thcolumn</th>\n","      <th>196throw_198thcolumn</th>\n","      <th>196throw_199thcolumn</th>\n","      <th>197throw_198thcolumn</th>\n","      <th>197throw_199thcolumn</th>\n","      <th>198throw_199thcolumn</th>\n","      <th>missing_parent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>UmrK0vMLopoR</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>...</td>\n","      <td>-0.072599</td>\n","      <td>-0.058396</td>\n","      <td>-0.041544</td>\n","      <td>0.142806</td>\n","      <td>-0.006377</td>\n","      <td>0.108005</td>\n","      <td>0.148327</td>\n","      <td>0.093230</td>\n","      <td>-0.004984</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CPaeQkhcjg7d</td>\n","      <td>2019</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>-0.001084</td>\n","      <td>-0.025624</td>\n","      <td>-0.031863</td>\n","      <td>0.162011</td>\n","      <td>0.067439</td>\n","      <td>0.017155</td>\n","      <td>0.088893</td>\n","      <td>0.064094</td>\n","      <td>0.194381</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nb4EetVPm3gs</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.018640</td>\n","      <td>0.010771</td>\n","      <td>-0.044341</td>\n","      <td>0.128386</td>\n","      <td>0.047282</td>\n","      <td>0.087678</td>\n","      <td>0.146221</td>\n","      <td>-0.009425</td>\n","      <td>0.035150</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>p4vPhVu91o4b</td>\n","      <td>2018</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>30</td>\n","      <td>18</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0.025618</td>\n","      <td>-0.007152</td>\n","      <td>0.032584</td>\n","      <td>0.121726</td>\n","      <td>0.045089</td>\n","      <td>0.154464</td>\n","      <td>0.106817</td>\n","      <td>0.065336</td>\n","      <td>0.234708</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M09PXs7arQ5E</td>\n","      <td>2019</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>-0.031508</td>\n","      <td>-0.010196</td>\n","      <td>0.035638</td>\n","      <td>0.074978</td>\n","      <td>0.030579</td>\n","      <td>0.025640</td>\n","      <td>0.118199</td>\n","      <td>0.112522</td>\n","      <td>0.143666</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 19929 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89974ba0-3bac-405e-99c6-84f14a3142fe')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-89974ba0-3bac-405e-99c6-84f14a3142fe button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-89974ba0-3bac-405e-99c6-84f14a3142fe');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cbf70cc5-678c-4157-9a06-b5e522ac9cb6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cbf70cc5-678c-4157-9a06-b5e522ac9cb6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cbf70cc5-678c-4157-9a06-b5e522ac9cb6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_total"}},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","metadata":{"id":"oCuFQxISOxW-"},"source":["## **Quantitative Column Data Cleaning**"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":80,"status":"ok","timestamp":1740352699089,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"biDeUamu4hjR","colab":{"base_uri":"https://localhost:8080/"},"outputId":"45ae3eea-af4b-44e0-eafc-f561acb99dc9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Corr -0.015738679074508887 P-value 0.5844207491480374\n"]}],"source":["mri_soln = train_total[['participant_id', 'MRI_Track_Age_at_Scan']].join(training_solutions.set_index('participant_id'), on='participant_id')\n","corr, p_value = pearsonr(mri_soln['MRI_Track_Age_at_Scan'].notnull(), mri_soln.loc[mri_soln['MRI_Track_Age_at_Scan'] != None, 'ADHD_Outcome'])\n","print(\"Corr\", corr, \"P-value\", p_value)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":28,"status":"ok","timestamp":1740352699116,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"OdFDyU1Y59Of","colab":{"base_uri":"https://localhost:8080/"},"outputId":"57fb2ba2-815b-4633-aac5-462325686b27"},"outputs":[{"output_type":"stream","name":"stdout","text":["Corr -0.0033230191390281427 P-value 0.9080708142483979\n"]}],"source":["mri_soln = train_total[['participant_id', 'MRI_Track_Age_at_Scan']].join(training_solutions.set_index('participant_id'), on='participant_id')\n","corr, p_value = pearsonr(mri_soln['MRI_Track_Age_at_Scan'].notnull(), mri_soln.loc[mri_soln['MRI_Track_Age_at_Scan'] != None, 'Sex_F'])\n","print(\"Corr\", corr, \"P-value\", p_value)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1740352699137,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"XNQw2r1u1b32","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a8426c23-a77e-4173-e6f8-8b75a079a795"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":32}],"source":["train_total.loc[:, 'MRI_Track_Age_at_Scan'] = train_total['MRI_Track_Age_at_Scan'].fillna(train_total['MRI_Track_Age_at_Scan'].mean())\n","train_total['MRI_Track_Age_at_Scan'].isnull().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":135,"status":"ok","timestamp":1740352699295,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"imtxG_81KkOe","colab":{"base_uri":"https://localhost:8080/"},"outputId":"02ad8b49-d155-416e-ecc6-a2870348f291"},"outputs":[{"output_type":"stream","name":"stdout","text":["Col EHQ_EHQ_Total DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col ColorVision_CV_Score DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col APQ_P_APQ_P_CP DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col APQ_P_APQ_P_ID DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col APQ_P_APQ_P_INV DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col APQ_P_APQ_P_OPD DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col APQ_P_APQ_P_PM DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col APQ_P_APQ_P_PP DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col SDQ_SDQ_Conduct_Problems DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col SDQ_SDQ_Difficulties_Total DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col SDQ_SDQ_Emotional_Problems DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col SDQ_SDQ_Externalizing DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col SDQ_SDQ_Generating_Impact DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col SDQ_SDQ_Hyperactivity DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col SDQ_SDQ_Internalizing DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col SDQ_SDQ_Peer_Problems DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col SDQ_SDQ_Prosocial DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n","Col MRI_Track_Age_at_Scan DF Empty DataFrame\n","Columns: [participant_id, Basic_Demos_Enroll_Year, Basic_Demos_Study_Site, PreInt_Demos_Fam_Child_Ethnicity, PreInt_Demos_Fam_Child_Race, MRI_Track_Scan_Location, Barratt_Barratt_P1_Edu, Barratt_Barratt_P1_Occ, Barratt_Barratt_P2_Edu, Barratt_Barratt_P2_Occ, EHQ_EHQ_Total, ColorVision_CV_Score, APQ_P_APQ_P_CP, APQ_P_APQ_P_ID, APQ_P_APQ_P_INV, APQ_P_APQ_P_OPD, APQ_P_APQ_P_PM, APQ_P_APQ_P_PP, SDQ_SDQ_Conduct_Problems, SDQ_SDQ_Difficulties_Total, SDQ_SDQ_Emotional_Problems, SDQ_SDQ_Externalizing, SDQ_SDQ_Generating_Impact, SDQ_SDQ_Hyperactivity, SDQ_SDQ_Internalizing, SDQ_SDQ_Peer_Problems, SDQ_SDQ_Prosocial, MRI_Track_Age_at_Scan, 0throw_1thcolumn, 0throw_2thcolumn, 0throw_3thcolumn, 0throw_4thcolumn, 0throw_5thcolumn, 0throw_6thcolumn, 0throw_7thcolumn, 0throw_8thcolumn, 0throw_9thcolumn, 0throw_10thcolumn, 0throw_11thcolumn, 0throw_12thcolumn, 0throw_13thcolumn, 0throw_14thcolumn, 0throw_15thcolumn, 0throw_16thcolumn, 0throw_17thcolumn, 0throw_18thcolumn, 0throw_19thcolumn, 0throw_20thcolumn, 0throw_21thcolumn, 0throw_22thcolumn, 0throw_23thcolumn, 0throw_24thcolumn, 0throw_25thcolumn, 0throw_26thcolumn, 0throw_27thcolumn, 0throw_28thcolumn, 0throw_29thcolumn, 0throw_30thcolumn, 0throw_31thcolumn, 0throw_32thcolumn, 0throw_33thcolumn, 0throw_34thcolumn, 0throw_35thcolumn, 0throw_36thcolumn, 0throw_37thcolumn, 0throw_38thcolumn, 0throw_39thcolumn, 0throw_40thcolumn, 0throw_41thcolumn, 0throw_42thcolumn, 0throw_43thcolumn, 0throw_44thcolumn, 0throw_45thcolumn, 0throw_46thcolumn, 0throw_47thcolumn, 0throw_48thcolumn, 0throw_49thcolumn, 0throw_50thcolumn, 0throw_51thcolumn, 0throw_52thcolumn, 0throw_53thcolumn, 0throw_54thcolumn, 0throw_55thcolumn, 0throw_56thcolumn, 0throw_57thcolumn, 0throw_58thcolumn, 0throw_59thcolumn, 0throw_60thcolumn, 0throw_61thcolumn, 0throw_62thcolumn, 0throw_63thcolumn, 0throw_64thcolumn, 0throw_65thcolumn, 0throw_66thcolumn, 0throw_67thcolumn, 0throw_68thcolumn, 0throw_69thcolumn, 0throw_70thcolumn, 0throw_71thcolumn, 0throw_72thcolumn, ...]\n","Index: []\n","\n","[0 rows x 19929 columns]\n"]}],"source":["numeric_cols = ['EHQ_EHQ_Total', 'ColorVision_CV_Score', 'APQ_P_APQ_P_CP', 'APQ_P_APQ_P_ID',\n","                'APQ_P_APQ_P_INV', 'APQ_P_APQ_P_OPD', 'APQ_P_APQ_P_PM', 'APQ_P_APQ_P_PP',\n","                'SDQ_SDQ_Conduct_Problems', 'SDQ_SDQ_Difficulties_Total', 'SDQ_SDQ_Emotional_Problems',\n","                'SDQ_SDQ_Externalizing', 'SDQ_SDQ_Generating_Impact', 'SDQ_SDQ_Hyperactivity',\n","                'SDQ_SDQ_Internalizing', 'SDQ_SDQ_Peer_Problems', 'SDQ_SDQ_Prosocial', 'MRI_Track_Age_at_Scan']\n","\n","for col in numeric_cols:\n","  print(\"Col\", col, \"DF\", train_total[pd.to_numeric(train_total[col], errors='coerce').isna()])"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":307,"status":"ok","timestamp":1740352699601,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"ml6q_vB0NToL","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b00a2095-134d-4913-b1d5-bf633ea4ebbf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Out of Range Laterality Index (Score) Series([], Name: EHQ_EHQ_Total, dtype: float64)\n","Out of Range Color vision test score Series([], Name: ColorVision_CV_Score, dtype: int64)\n","Out of Range Corporal Punishment Score 226     0\n","324     2\n","347     0\n","352     0\n","360     0\n","384     0\n","759     0\n","864     2\n","871     2\n","892     0\n","947     0\n","1028    0\n","1094    0\n","1101    0\n","1136    0\n","Name: APQ_P_APQ_P_CP, dtype: int64\n","Out of Range Inconsistent Discipline Score 226     0\n","281     5\n","347     0\n","352     0\n","360     0\n","384     0\n","759     0\n","892     0\n","947     0\n","1028    0\n","1094    0\n","1101    0\n","1136    0\n","Name: APQ_P_APQ_P_ID, dtype: int64\n","Out of Range Involvement Score 226     0\n","347     0\n","352     0\n","360     0\n","384     0\n","759     0\n","892     0\n","947     0\n","1028    0\n","1094    0\n","1101    0\n","1136    0\n","Name: APQ_P_APQ_P_INV, dtype: int64\n","Out of Range Other Discipline Practices Score 226     0\n","347     0\n","352     0\n","360     0\n","384     0\n","759     0\n","892     0\n","947     0\n","1028    0\n","1094    0\n","1101    0\n","1136    0\n","Name: APQ_P_APQ_P_OPD, dtype: int64\n","Out of Range Poor Monitoring/Supervision Score 226     0\n","297     6\n","347     0\n","352     0\n","360     0\n","384     0\n","492     9\n","705     5\n","740     9\n","759     0\n","892     0\n","947     0\n","1028    0\n","1056    9\n","1094    0\n","1101    0\n","1136    0\n","Name: APQ_P_APQ_P_PM, dtype: int64\n","Out of Range Positive Parenting Score 226     0\n","347     0\n","352     0\n","360     0\n","384     0\n","759     0\n","892     0\n","947     0\n","1028    0\n","1094    0\n","1101    0\n","1136    0\n","Name: APQ_P_APQ_P_PP, dtype: int64\n","Out of Range Conduct problems scale Series([], Name: SDQ_SDQ_Conduct_Problems, dtype: int64)\n","Out of Range Total Difficulties Score Series([], Name: SDQ_SDQ_Difficulties_Total, dtype: int64)\n","Out of Range Emotional Problems Scale Series([], Name: SDQ_SDQ_Emotional_Problems, dtype: int64)\n","Out of Range Externalizing Score Series([], Name: SDQ_SDQ_Externalizing, dtype: int64)\n","Out of Range Generating Impact Scores Series([], Name: SDQ_SDQ_Generating_Impact, dtype: int64)\n","Out of Range Hyperactivity Scale Series([], Name: SDQ_SDQ_Hyperactivity, dtype: int64)\n","Out of Range Internalizing Score Series([], Name: SDQ_SDQ_Internalizing, dtype: int64)\n","Out of Range Peer Problems Scale Series([], Name: SDQ_SDQ_Peer_Problems, dtype: int64)\n","Out of Range Prosocial Scale Series([], Name: SDQ_SDQ_Prosocial, dtype: int64)\n","Out of Range Age at time of MRI scane Series([], Name: MRI_Track_Age_at_Scan, dtype: float64)\n"]}],"source":["out_of_range_EHQ = train_total[(train_total['EHQ_EHQ_Total'] < -100) | (train_total['EHQ_EHQ_Total'] > 100)]\n","out_of_range_CV = train_total[(train_total['ColorVision_CV_Score'] < 0) | (train_total['ColorVision_CV_Score'] > 18)]\n","out_of_range_CP = train_total[(train_total['APQ_P_APQ_P_CP'] < 3) | (train_total['APQ_P_APQ_P_CP'] > 15)]\n","out_of_range_ID = train_total[(train_total['APQ_P_APQ_P_ID'] < 6) | (train_total['APQ_P_APQ_P_ID'] > 30)]\n","out_of_range_INV = train_total[(train_total['APQ_P_APQ_P_INV'] < 10) | (train_total['APQ_P_APQ_P_INV'] > 50)]\n","out_of_range_OPD = train_total[(train_total['APQ_P_APQ_P_OPD'] < 6) | (train_total['APQ_P_APQ_P_OPD'] > 30)]\n","out_of_range_PM = train_total[(train_total['APQ_P_APQ_P_PM'] < 10) | (train_total['APQ_P_APQ_P_PM'] > 50)]\n","out_of_range_PP = train_total[(train_total['APQ_P_APQ_P_PP'] < 6) | (train_total['APQ_P_APQ_P_PP'] > 30)]\n","out_of_range_Cond = train_total[(train_total['SDQ_SDQ_Conduct_Problems'] < 0) | (train_total['SDQ_SDQ_Conduct_Problems'] > 10)]\n","out_of_range_Diff = train_total[(train_total['SDQ_SDQ_Difficulties_Total'] < 0) | (train_total['SDQ_SDQ_Difficulties_Total'] > 40)]\n","out_of_range_Emot = train_total[(train_total['SDQ_SDQ_Emotional_Problems'] < 0) | (train_total['SDQ_SDQ_Emotional_Problems'] > 10)]\n","out_of_range_Ext = train_total[(train_total['SDQ_SDQ_Externalizing'] < 0) | (train_total['SDQ_SDQ_Externalizing'] > 20)]\n","out_of_range_Gen = train_total[(train_total['SDQ_SDQ_Generating_Impact'] < 0) | (train_total['SDQ_SDQ_Generating_Impact'] > 10)]\n","out_of_range_Hyper = train_total[(train_total['SDQ_SDQ_Hyperactivity'] < 0) | (train_total['SDQ_SDQ_Hyperactivity'] > 10)]\n","out_of_range_Int = train_total[(train_total['SDQ_SDQ_Internalizing'] < 0) | (train_total['SDQ_SDQ_Internalizing'] > 20)]\n","out_of_range_Peer = train_total[(train_total['SDQ_SDQ_Peer_Problems'] < 0) | (train_total['SDQ_SDQ_Peer_Problems'] > 10)]\n","out_of_range_Pros = train_total[(train_total['SDQ_SDQ_Prosocial'] < 0) | (train_total['SDQ_SDQ_Prosocial'] > 10)]\n","out_of_range_Age = train_total[(train_total['MRI_Track_Age_at_Scan'] < 5) | (train_total['MRI_Track_Age_at_Scan'] > 22)]\n","\n","print('Out of Range Laterality Index (Score)', out_of_range_EHQ['EHQ_EHQ_Total'])\n","print('Out of Range Color vision test score', out_of_range_CV['ColorVision_CV_Score'])\n","print('Out of Range Corporal Punishment Score', out_of_range_CP['APQ_P_APQ_P_CP'])\n","print('Out of Range Inconsistent Discipline Score', out_of_range_ID['APQ_P_APQ_P_ID'])\n","print('Out of Range Involvement Score', out_of_range_INV['APQ_P_APQ_P_INV'])\n","print('Out of Range Other Discipline Practices Score', out_of_range_OPD['APQ_P_APQ_P_OPD'])\n","print('Out of Range Poor Monitoring/Supervision Score', out_of_range_PM['APQ_P_APQ_P_PM'])\n","print('Out of Range Positive Parenting Score', out_of_range_PP['APQ_P_APQ_P_PP'])\n","print('Out of Range Conduct problems scale', out_of_range_Cond['SDQ_SDQ_Conduct_Problems'])\n","print('Out of Range Total Difficulties Score', out_of_range_Diff['SDQ_SDQ_Difficulties_Total'])\n","print('Out of Range Emotional Problems Scale', out_of_range_Emot['SDQ_SDQ_Emotional_Problems'])\n","print('Out of Range Externalizing Score', out_of_range_Ext['SDQ_SDQ_Externalizing'])\n","print('Out of Range Generating Impact Scores', out_of_range_Gen['SDQ_SDQ_Generating_Impact'])\n","print('Out of Range Hyperactivity Scale', out_of_range_Hyper['SDQ_SDQ_Hyperactivity'])\n","print('Out of Range Internalizing Score', out_of_range_Int['SDQ_SDQ_Internalizing'])\n","print('Out of Range Peer Problems Scale', out_of_range_Peer['SDQ_SDQ_Peer_Problems'])\n","print('Out of Range Prosocial Scale', out_of_range_Pros['SDQ_SDQ_Prosocial'])\n","print('Out of Range Age at time of MRI scane', out_of_range_Age['MRI_Track_Age_at_Scan'])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":1245,"status":"ok","timestamp":1740352700846,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"8spGt0Rwc-t0","colab":{"base_uri":"https://localhost:8080/","height":738},"outputId":"20409455-676e-43fb-ad3a-e13418f8e32b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cp_soln = train_total[['participant_id', 'APQ_P_APQ_P_CP']].join(training_solutions.set_index('participant_id'), on='participant_id')\n","ax = sns.barplot(x='ADHD_Outcome', y='APQ_P_APQ_P_CP', data=cp_soln, hue='Sex_F', palette='deep')\n","plt.title('Relation between ADHD Outcome and Corporal Punishment Score Based on Sex')\n","plt.xlabel('ADHD Outcome')\n","plt.ylabel('Corporal Punishment Score')\n","plt.xticks([0, 1], ['Negative', 'Positive'])\n","handles, labels = ax.get_legend_handles_labels()\n","new_labels = ['Male', 'Female']\n","ax.legend(handles, new_labels)\n","ax.legend(handles, new_labels, bbox_to_anchor=(1.8, 1.8))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":2877,"status":"ok","timestamp":1740352703724,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"dDe3CnVTgF9q","colab":{"base_uri":"https://localhost:8080/","height":738},"outputId":"0b459ca6-8ef2-4bfe-f4c3-08eeae1a1f74"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA/sAAALRCAYAAAAEOLPeAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAe7pJREFUeJzs3Xd0FOX/9vFrE1IgjZZCCRB6b0EhQZqU0IsCimgI0qWjINGvFBUDSlWUphQVpAsqHaRIVem9SRNCkxJqIMk8f/Bkf6xpG9rC+H6ds+dk77ln5jObndm9dprFMAxDAAAAAADANJwcXQAAAAAAAHi0CPsAAAAAAJgMYR8AAAAAAJMh7AMAAAAAYDKEfQAAAAAATIawDwAAAACAyRD2AQAAAAAwmQyOLgAAAAAA8PSLj4/X3bt3HV3Gf5qLi4ucnZ3t6kvYBwAAAACkyDAMnT17VleuXHF0KZCUOXNmBQQEyGKxpNqPsA8AAAAASFFi0Pfz81OmTJnSDJl4PAzD0M2bN3X+/HlJUo4cOVLtT9gHAAAAACQrPj7eGvSzZcvm6HL+8zJmzChJOn/+vPz8/FI9pJ8L9AEAAAAAkpV4jn6mTJkcXAkSJf4v0rp+AmEfAAAAAJAqDt1/etj7vyDsAwAAAABgMoR9AAAAAABMhgv0AQAAAADS7bV+05/o/GZ82vqJzu9+x48fV1BQkLZv366yZcs6rI70YM8+AAAAAMB0IiIiZLFY1Llz5yTDunbtKovFooiIiCdf2BNC2AcAAAAAmFJgYKBmzpypW7duWdtu376tGTNmKE+ePA6s7PEj7AMAAAAATKl8+fIKDAzU/PnzrW3z589Xnjx5VK5cOWvb0qVL9cILLyhz5szKli2bGjZsqKNHj6Y67T179qhevXry9PSUv7+/3njjDV28ePGxLUt6EfYBAAAAAKb15ptvasqUKdbnkydPVtu2bW363LhxQ3369NGff/6pVatWycnJSc2aNVNCQkKy07xy5YpefPFFlStXTn/++aeWLl2qc+fOqWXLlo91WdKDC/QBAAAAAEzr9ddfV2RkpE6cOCFJ2rBhg2bOnKk1a9ZY+7z88ss240yePFm+vr7at2+fSpYsmWSaY8eOVbly5fTJJ5/YjBMYGKhDhw6pcOHCj2dh0oGwDwAAAAAwLV9fXzVo0EBTp06VYRhq0KCBsmfPbtPn8OHDGjBggLZs2aKLFy9a9+ifPHky2bC/c+dOrV69Wp6enkmGHT16lLAPAAAAAMDj9uabb6pbt26SpC+//DLJ8EaNGilv3ryaNGmScubMqYSEBJUsWVJ37txJdnrXr19Xo0aNNGzYsCTDcuTI8WiLf0CEfQAAAACAqdWtW1d37tyRxWJRWFiYzbB//vlHBw8e1KRJk1SlShVJ0vr161OdXvny5TVv3jzly5dPGTI8nbGaC/QBAAAAAEzN2dlZ+/fv1759++Ts7GwzLEuWLMqWLZsmTpyoI0eO6Ndff1WfPn1SnV7Xrl116dIltWrVSn/88YeOHj2qZcuWqW3btoqPj3+ci2K3p/MnCAAAAADAU23Gp60dXUK6eHt7J9vu5OSkmTNnqkePHipZsqSKFCmizz//XNWrV09xWjlz5tSGDRv07rvvqk6dOoqNjVXevHlVt25dOTk9HfvULYZhGI4uAgAAAADw9Ll9+7aOHTumoKAgubu7O7ocyP7/ydPxkwMAAAAAAHhkCPsAAAAAAJgMYR8AAAAAAJMh7AMAAAAAYDKEfQAAAAAATIawDwAAAACAyRD2AQAAAAAwGcI+AAAAAAAmQ9gHAAAAAOAJyJcvn0aPHv1E5pXhicwFAAAAAGAqWz9t/0TnF9zv63T1j4iI0LRp05K0Hz58WAULFnxUZT21CPsAAAAAAFOqW7eupkyZYtPm6+vroGqeLA7jBwAAAACYkpubmwICAmwezs7OWrhwocqXLy93d3flz59fgwcPVlxcnHU8i8WiCRMmqGHDhsqUKZOKFSumTZs26ciRI6pevbo8PDwUGhqqo0ePWsc5evSomjRpIn9/f3l6euq5557TypUrU63vypUrat++vXx9feXt7a0XX3xRO3fufCTLTtgHAAAAAPxn/PbbbwoPD1fPnj21b98+TZgwQVOnTtWQIUNs+n300UcKDw/Xjh07VLRoUb322mvq1KmTIiMj9eeff8owDHXr1s3a//r166pfv75WrVql7du3q27dumrUqJFOnjyZYi0tWrTQ+fPntWTJEm3dulXly5dXzZo1denSpYdeTg7jBwAAAACY0i+//CJPT0/r83r16uny5cvq37+/2rRpI0nKnz+/PvroI/Xr108DBw609m3btq1atmwpSXr33XcVEhKiDz74QGFhYZKknj17qm3bttb+ZcqUUZkyZazPP/roI/3444/66aefbH4USLR+/Xr9/vvvOn/+vNzc3CRJw4cP14IFCzR37lx17NjxoZadsA8AAAAAMKUaNWpo3Lhx1uceHh4qXbq0NmzYYLMnPz4+Xrdv39bNmzeVKVMmSVLp0qWtw/39/SVJpUqVsmm7ffu2YmJi5O3trevXr2vQoEFatGiRoqOjFRcXp1u3bqW4Z3/nzp26fv26smXLZtN+69Ytm9MDHhRhHwAAAABgSh4eHkmuvH/9+nUNHjxYL730UpL+7u7u1r9dXFysf1sslhTbEhISJEnvvPOOVqxYoeHDh6tgwYLKmDGjmjdvrjt37iRb2/Xr15UjRw6tWbMmybDMmTPbt4CpIOwDAAAAAP4zypcvr4MHDz7y2+9t2LBBERERatasmaR7Yf748eOp1nH27FllyJBB+fLle6S1SIR9AAAAAMB/yIABA9SwYUPlyZNHzZs3l5OTk3bu3Kk9e/bo448/fuDpFipUSPPnz1ejRo1ksVj0wQcfWPf6J6dWrVoKCQlR06ZN9emnn6pw4cI6c+aMFi1apGbNmqlChQoPXIvE1fgBAAAAAP8hYWFh+uWXX7R8+XI999xzqlSpkkaNGqW8efM+1HRHjhypLFmyKDQ0VI0aNVJYWJjKly+fYn+LxaLFixeratWqatu2rQoXLqxXX31VJ06csF4j4GFYDMMwHnoqAAAAAADTuX37to4dO6agoCCb89nhOPb+T9izDwAAAACAyRD2AQAAAAAwGcI+AAAAAAAmQ9gHAAAAAMBkCPsAAAAAAJgMYR8AAAAAkKrU7hePJ8ve/0WGx1wHAAAAAOAZ5erqKicnJ505c0a+vr5ydXWVxWJxdFn/SYZh6M6dO7pw4YKcnJzk6uqaan+LYRjGE6oNAAAAAPCMuXPnjqKjo3Xz5k1HlwJJmTJlUo4cOQj7AAAAAICHYxiG4uLiFB8f7+hS/tOcnZ2VIUMGu46uIOwDAAAAAGAyXKAPAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyhH0AAAAAAEyGsA8AAAAAgMkQ9gEAAAAAMBnCPgAAAAAAJkPYBwAAAADAZAj7AAAAAACYDGEfAAAAAACTIewDAAAAAGAyDg/7a9askcVi0Zo1ax7pdC0WiwYNGvRIp2mPiIgIeXp6PvH5Anh4jtpuPKue9tfrQT9fLBaLunXr9niKApIxaNAgWSwWR5eB/6969eqqXr26o8sAgIeWrrA/depUWSwW6yNDhgzKlSuXIiIidPr06cdVY4oWL178VH/RfFS++uorTZ061dFlPBFfffWVLBaLKlasmGKff78Hs2bNquDgYPXs2VP79u1L0v/48eOyWCwaPnx4stNL/JJ18eJFa1tERITNfDw9PZU/f341b95c8+bNU0JCQrqWa8OGDWrWrJn8/f3l5uamfPnyqVOnTjp58mS6pnO/mzdvatCgQY/8hzLYJyYmRoMHD1aZMmXk6empjBkzqmTJknr33Xd15swZR5f31Ehc/xIfzs7OypMnj5o1a6YdO3Y4ujzT2bhxowYNGqQrV67YPc7PP/+satWqyc/PT5kyZVL+/PnVsmVLLV269PEV+pjky5fP5v3m7u6uQoUKqW/fvrp06ZKjy3tmJCQk6Ntvv1XFihWVNWtWeXl5qXDhwgoPD9fmzZsdXV66/Xs7ZLFY5O3trbJly2rs2LGKj493dIkA8FhkeJCRPvzwQwUFBen27dvavHmzpk6dqvXr12vPnj1yd3d/1DWmaPHixfryyy+TDfy3bt1ShgwPtHhPna+++krZs2dXRESEo0t57KZPn658+fLp999/15EjR1SwYMFk+9WuXVvh4eEyDENXr17Vzp07NW3aNH311VcaNmyY+vTp89C1uLm56euvv5Z07/104sQJ/fzzz2revLmqV6+uhQsXytvbO83pfPHFF+rZs6fy58+v7t27K0eOHNq/f7++/vprzZo1S4sXL1ZoaGi667t586YGDx4sSeyBeML++usv1apVSydPnlSLFi3UsWNHubq6ateuXfrmm2/0448/6tChQ44u86nSqlUr1a9fX/Hx8dq/f7/GjRunJUuWaPPmzSpbtuxjmWfVqlV169Ytubq6PpbpP402btyowYMHKyIiQpkzZ06z//Dhw9W3b19Vq1ZNkZGRypQpk44cOaKVK1dq5syZqlu37uMv+hErW7as3n77bUnS7du3tXXrVo0ePVpr167V77//7uDqng09evTQl19+qSZNmqh169bKkCGDDh48qCVLlih//vyqVKmSo0t8IInbIUm6evWqFi9erO7du+vEiRP67LPPrP2WL1/uqBIB4JF6oDRcr149VahQQZLUvn17Zc+eXcOGDdNPP/2kli1bPtICH9ST/NEBj8axY8e0ceNGzZ8/X506ddL06dM1cODAZPsWLlxY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LPfQoUPl5OSkd955R1evXtWnn36q1q1ba8uWLWm+ZtK9sP/SSy/J1dVVrVq10rhx4/THH3/oueees2t8ScqTJ4+qVaum1atXKyYmxuYw+5s3b9qcl39/e3q98cYbWr58uVasWKHChQsn2+fmzZtatWqVqlSpoqCgoGT7vPLKK+rYsaN++eUX9e/f3+75+/r6aty4cerSpYuaNWuml156SZJUunRpSfe+xFapUkUuLi7q2LGj8uXLp6NHj+rnn3+2BtEHWScCAgI0ePBgbd68WRMnTlTmzJm1ceNG5cmTR5988okWL16szz77TCVLllR4eLh1XHve6ylZsWKF/vrrL7Vt21YBAQHau3evJk6cqL1792rz5s1JAmLLli0VFBSkqKgobdu2TV9//bX8/Pxs9ra3b99e33//vV577TWFhobq119/VYMGDex67RN/sHzjjTfs6p+43M8995yioqJ07tw5jRkzRhs2bND27dttDrWOi4tTWFiYXnjhBQ0fPtzmB6LLly+rfv36atmypVq1aqXZs2erS5cucnV11Ztvvinp3ukm1atX15EjR9StWzcFBQVpzpw5ioiI0JUrV9SzZ0+b2qZMmaLbt2+rY8eOcnNzU9asWRUTE6Ovv/5arVq1UocOHXTt2jV98803CgsL0++///7IDrlPDIjZsmV7oPGPHDmi5s2bq127dmrTpo0mT56siIgIBQcHW7d9/3bnzh2FhYUpNjbW+n4+ffq0fvnlF125ckU+Pj7WvuvXr9f8+fP11ltvycvLS59//rlefvllnTx5MknNr7zyiooVK6ahQ4dq0aJF+vjjj5U1a1ZNmDBBL774ooYNG6bp06frnXfe0XPPPaeqVatKuvcjWOPGjbV+/Xp17NhRxYoV0+7duzVq1CgdOnRICxYssJlPWjW99NJLOnTokH744QeNGjVK2bNnlyTrD4P/5ufnp4wZM+rnn39W9+7dlTVr1hRf7/j4eDVs2FCrVq3Sq6++qp49e+ratWtasWKF9uzZowIFCsgwDDVu3FirV69Wu3btVLZsWS1btkx9+/bV6dOnNWrUKJtp/vrrr5o9e7a6deum7NmzK1++fOn+3EnO3bt3rdv627dva/v27Ro5cqSqVq1qsy22d9vSuXNnzZ07V926dVPx4sX1zz//aP369dq/f7/Kly9vXRZ7Pld3796tOnXqyNfX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JIfsjhw5UqVKlZKHh4cCAwP11ltv6fr165LuHQbctm1bXb161brncdCgQZJsD/197bXX9Morr9jUdvfuXWXPnl3ffvutJCkhIUFRUVEKCgpSxowZVaZMGc2dO/cRvFLAs8/NzU0BAQHKmzevunTpolq1aumnn37S5cuXFR4erixZsihTpkyqV6+eDh8+bB3vxIkTatSokbJkySIPDw+VKFFCixcvlmR7GD/rMgAASAthH3hCnJ2d9cknn+iLL77Q33//nWT40aNHVbduXb388svatWuXZs2apfXr16tbt27WPuHh4Tpz5ozWrFmjefPmaeLEiTp//rzNdJycnPT5559r7969mjZtmn799Vf169dP0r3DgEePHi1vb29FR0crOjpa77zzTpJaWrdurZ9//tn6I4EkLVu2TDdv3lSzZs0kSVFRUfr22281fvx47d27V71799brr7+utWvXPpLXCzCTjBkz6s6dO4qIiNCff/6pn376SZs2bZJhGKpfv77u3r0rSeratatiY2O1bt067d69W8OGDZOnp2eS6bEuAwCAtGRwdAHAf0mzZs1UtmxZDRw4UN98843NsKioKLVu3Vq9evWSJBUqVEiff/65qlWrpnHjxun48eNauXKl/vjjD1WoUEGS9PXXX6tQoUI200kcX7q3h+/jjz9W586d9dVXX8nV1VU+Pj6yWCwKCAhIsc6wsDB5eHjoxx9/1BtvvCFJmjFjhho3biwvLy/Fxsbqk08+0cqVKxUSEiJJyp8/v9avX68JEyaoWrVqD/tSAaZgGIZWrVqlZcuWqV69elqwYIE2bNig0NBQSdL06dMVGBioBQsWqEWLFjp58qRefvlllSpVStK99So5rMsAACAthH3gCRs2bJhefPHFJHvhdu7cqV27dmn69OnWNsMwlJCQoGPHjunQoUPKkCGDypcvbx1esGBBZcmSxWY6K1euVFRUlA4cOKCYmBjFxcXp9u3bunnzpt3n8WbIkEEtW7bU9OnT9cYbb+jGjRtauHChZs6cKUk6cuSIbt68qdq1a9uMd+fOHZUrVy5drwdgRr/88os8PT119+5dJSQk6LXXXtNLL72kX375RRUrVrT2y5Ytm4oUKaL9+/dLknr06KEuXbpo+fLlqlWrll5++WWVLl36getgXQYA4L+LsA88YVWrVlVYWJgiIyMVERFhbb9+/bo6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\n"},"metadata":{}}],"source":["bins = [-1, 2, 7, 11, 15]\n","binned = pd.cut(train_total['APQ_P_APQ_P_CP'], bins, labels=[0, 1, 2, 3])\n","binned = binned.astype('float64')\n","train_total = train_total.assign(APQ_P_APQ_P_CP=train_total['APQ_P_APQ_P_CP'].astype('float64'))\n","train_total.loc[:, 'APQ_P_APQ_P_CP'] = binned\n","cp_soln_bin = train_total[['participant_id', 'APQ_P_APQ_P_CP']].join(training_solutions.set_index('participant_id'), on='participant_id')\n","ax = sns.barplot(x='ADHD_Outcome', y='APQ_P_APQ_P_CP', data=cp_soln, hue='Sex_F', palette='deep')\n","plt.title('Relation between ADHD Outcome and Corporal Punishment Score Based on Sex -- Bins')\n","plt.xlabel('ADHD Outcome')\n","plt.ylabel('Corporal Punishment Score')\n","plt.xticks([0, 1], ['Negative', 'Positive'])\n","handles, labels = ax.get_legend_handles_labels()\n","new_labels = ['Male', 'Female']\n","ax.legend(handles, new_labels)\n","ax.legend(handles, new_labels, bbox_to_anchor=(1.8, 1.8))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":1377,"status":"ok","timestamp":1740352705103,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"IC0CIG_74wLY","colab":{"base_uri":"https://localhost:8080/","height":458},"outputId":"d358831c-458d-4c13-fd77-27dd4e2b967f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       1.0\n","1       2.0\n","2       1.0\n","3       2.0\n","4       2.0\n","       ... \n","1208    2.0\n","1209    1.0\n","1210    3.0\n","1211    2.0\n","1212    2.0\n","Name: APQ_P_APQ_P_ID, Length: 1210, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>APQ_P_APQ_P_ID</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":37}],"source":["bins = [-1, 5, 10, 15, 20, 25, 30]\n","binned = pd.cut(train_total['APQ_P_APQ_P_ID'], bins, labels=[0, 1, 2, 3, 4, 5])\n","binned = binned.astype('float64')\n","train_total = train_total.assign(APQ_P_APQ_P_ID=train_total['APQ_P_APQ_P_ID'].astype('float64'))\n","train_total.loc[:, 'APQ_P_APQ_P_ID'] = binned\n","train_total['APQ_P_APQ_P_ID']"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":456,"status":"ok","timestamp":1740352705560,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"5W_FHyNUBuMA","colab":{"base_uri":"https://localhost:8080/","height":458},"outputId":"a06775ea-0652-4067-8e74-b549803b5449"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       7.0\n","1       5.0\n","2       5.0\n","3       5.0\n","4       6.0\n","       ... \n","1208    5.0\n","1209    4.0\n","1210    4.0\n","1211    5.0\n","1212    6.0\n","Name: APQ_P_APQ_P_INV, Length: 1210, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>APQ_P_APQ_P_INV</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>6.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":38}],"source":["bins = [-1, 9, 15, 21, 27, 33, 39, 45, 50]\n","binned = pd.cut(train_total['APQ_P_APQ_P_INV'], bins, labels=[0, 1, 2, 3, 4, 5, 6, 7])\n","binned = binned.astype('float64')\n","train_total = train_total.assign(APQ_P_APQ_P_INV=train_total['APQ_P_APQ_P_INV'].astype('float64'))\n","train_total.loc[:, 'APQ_P_APQ_P_INV'] = binned\n","train_total['APQ_P_APQ_P_INV']"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":463,"status":"ok","timestamp":1740352706024,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"JBe3yYSOe9qc","colab":{"base_uri":"https://localhost:8080/","height":458},"outputId":"30131d9e-afe4-4696-959d-c2e0d5b003e1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       2.0\n","1       3.0\n","2       3.0\n","3       3.0\n","4       3.0\n","       ... \n","1208    3.0\n","1209    3.0\n","1210    2.0\n","1211    3.0\n","1212    3.0\n","Name: APQ_P_APQ_P_OPD, Length: 1210, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>APQ_P_APQ_P_OPD</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>3.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":39}],"source":["bins = [-1, 5, 10, 15, 20, 25, 30]\n","binned = pd.cut(train_total['APQ_P_APQ_P_OPD'], bins, labels=[0, 1, 2, 3, 4, 5])\n","binned = binned.astype('float64')\n","train_total = train_total.assign(APQ_P_APQ_P_OPD=train_total['APQ_P_APQ_P_OPD'].astype('float64'))\n","train_total.loc[:, 'APQ_P_APQ_P_OPD'] = binned\n","train_total['APQ_P_APQ_P_OPD']"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":455,"status":"ok","timestamp":1740352706478,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"Ucuem07GuBQl","colab":{"base_uri":"https://localhost:8080/","height":458},"outputId":"2d8f5efa-56fa-42fc-ca77-f823e6e4cf50"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       1.0\n","1       3.0\n","2       1.0\n","3       2.0\n","4       3.0\n","       ... \n","1208    1.0\n","1209    1.0\n","1210    2.0\n","1211    3.0\n","1212    2.0\n","Name: APQ_P_APQ_P_PM, Length: 1210, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>APQ_P_APQ_P_PM</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":40}],"source":["bins = [-1, 9, 15, 21, 27, 33, 39, 45, 50]\n","binned = pd.cut(train_total['APQ_P_APQ_P_PM'], bins, labels=[0, 1, 2, 3, 4, 5, 6, 7])\n","binned = binned.astype('float64')\n","train_total = train_total.assign(APQ_P_APQ_P_PM=train_total['APQ_P_APQ_P_PM'].astype('float64'))\n","train_total.loc[:, 'APQ_P_APQ_P_PM'] = binned\n","train_total['APQ_P_APQ_P_PM']"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":348,"status":"ok","timestamp":1740352706860,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"_ZdmJbXNuVPz","colab":{"base_uri":"https://localhost:8080/","height":458},"outputId":"d3f9d6dd-584a-4d35-9ee1-6db1dad94502"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       5.0\n","1       5.0\n","2       5.0\n","3       5.0\n","4       5.0\n","       ... \n","1208    4.0\n","1209    4.0\n","1210    5.0\n","1211    4.0\n","1212    4.0\n","Name: APQ_P_APQ_P_PP, Length: 1210, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>APQ_P_APQ_P_PP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":41}],"source":["bins = [-1, 5, 10, 15, 20, 25, 30]\n","binned = pd.cut(train_total['APQ_P_APQ_P_PP'], bins, labels=[0, 1, 2, 3, 4, 5])\n","binned = binned.astype('float64')\n","train_total = train_total.assign(APQ_P_APQ_P_PP=train_total['APQ_P_APQ_P_PP'].astype('float64'))\n","train_total.loc[:, 'APQ_P_APQ_P_PP'] = binned\n","train_total['APQ_P_APQ_P_PP']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_PEqp1HRuxLy"},"outputs":[],"source":["# func_cols = train_functional.columns\n","# for col in func_cols:\n","#   if col != 'participant_id':\n","#     train_total = train_total.assign(col=train_total[col].astype('float64'))\n","#     if len(train_total[(train_total[col] < -1) | (train_total[col] > 1)]) > 0:\n","#       print(col)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":566,"status":"ok","timestamp":1740352707429,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"DyvK_nSAqk4B","colab":{"base_uri":"https://localhost:8080/","height":461},"outputId":"bfc9364a-7161-4812-c53f-a3e6527e41f4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     participant_id  Basic_Demos_Enroll_Year  \\\n","0      UmrK0vMLopoR                     2016   \n","1      CPaeQkhcjg7d                     2019   \n","2      Nb4EetVPm3gs                     2016   \n","3      p4vPhVu91o4b                     2018   \n","4      M09PXs7arQ5E                     2019   \n","...             ...                      ...   \n","1208   Atx7oub96GXS                     2019   \n","1209   groSbUfkQngM                     2016   \n","1210   zmxGvIrOD0bt                     2015   \n","1211   rOmWFuJCud5G                     2018   \n","1212   k8HhHnnu2wmt                     2018   \n","\n","      PreInt_Demos_Fam_Child_Ethnicity  PreInt_Demos_Fam_Child_Race  \\\n","0                                  0.0                            0   \n","1                                  1.0                            2   \n","2                                  1.0                            8   \n","3                                  0.0                            8   \n","4                                  0.0                            1   \n","...                                ...                          ...   \n","1208                               0.0                            0   \n","1209                               0.0                            0   \n","1210                               1.0                            2   \n","1211                               0.0                            8   \n","1212                               1.0                            2   \n","\n","      MRI_Track_Scan_Location  Barratt_Barratt_P1_Edu  Barratt_Barratt_P1_Occ  \\\n","0                           1                      21                      45   \n","1                           3                      15                      15   \n","2                           1                      18                      40   \n","3                           3                      15                      30   \n","4                           3                      15                      20   \n","...                       ...                     ...                     ...   \n","1208                        2                      21                      40   \n","1209                        1                      18                      35   \n","1210                        1                      18                      20   \n","1211                        3                      21                      40   \n","1212                        2                      21                      40   \n","\n","      Barratt_Barratt_P2_Edu  Barratt_Barratt_P2_Occ  EHQ_EHQ_Total  ...  \\\n","0                         21                      45          40.00  ...   \n","1                          0                       0         -94.47  ...   \n","2                          0                       0         -46.67  ...   \n","3                         18                       0         -26.68  ...   \n","4                          0                       0           0.00  ...   \n","...                      ...                     ...            ...  ...   \n","1208                      21                      40          87.80  ...   \n","1209                       0                       0          77.80  ...   \n","1210                       0                       0          16.68  ...   \n","1211                      18                      45          53.40  ...   \n","1212                      18                      45         -57.80  ...   \n","\n","      196throw_199thcolumn  197throw_198thcolumn  197throw_199thcolumn  \\\n","0                 0.108005              0.148327              0.093230   \n","1                 0.017155              0.088893              0.064094   \n","2                 0.087678              0.146221             -0.009425   \n","3                 0.154464              0.106817              0.065336   \n","4                 0.025640              0.118199              0.112522   \n","...                    ...                   ...                   ...   \n","1208              0.054290              0.101367              0.159979   \n","1209              0.093136             -0.029158              0.084720   \n","1210              0.051195              0.051761              0.010093   \n","1211              0.093942              0.115655              0.106790   \n","1212             -0.029927             -0.017830              0.062416   \n","\n","      198throw_199thcolumn  missing_parent  Harlem  MRV  Midtown  \\\n","0                -0.004984             0.0     0.0  0.0      0.0   \n","1                 0.194381             0.0     0.0  0.0      1.0   \n","2                 0.035150             0.0     0.0  0.0      0.0   \n","3                 0.234708             0.0     0.0  0.0      1.0   \n","4                 0.143666             0.0     0.0  0.0      1.0   \n","...                    ...             ...     ...  ...      ...   \n","1208              0.149812             0.0     0.0  0.0      0.0   \n","1209              0.135419             0.0     0.0  0.0      0.0   \n","1210              0.117584             0.0     0.0  0.0      0.0   \n","1211              0.117870             0.0     0.0  0.0      1.0   \n","1212              0.161122             0.0     0.0  0.0      1.0   \n","\n","      Staten Island_Study  SI RUMC  \n","0                     1.0      0.0  \n","1                     0.0      0.0  \n","2                     1.0      0.0  \n","3                     0.0      0.0  \n","4                     0.0      0.0  \n","...                   ...      ...  \n","1208                  1.0      0.0  \n","1209                  1.0      0.0  \n","1210                  1.0      0.0  \n","1211                  0.0      0.0  \n","1212                  0.0      0.0  \n","\n","[1210 rows x 19933 columns]"],"text/html":["\n","  <div id=\"df-a5770a57-32de-4f58-9b1c-431b44e9f517\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>participant_id</th>\n","      <th>Basic_Demos_Enroll_Year</th>\n","      <th>PreInt_Demos_Fam_Child_Ethnicity</th>\n","      <th>PreInt_Demos_Fam_Child_Race</th>\n","      <th>MRI_Track_Scan_Location</th>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <th>Barratt_Barratt_P2_Edu</th>\n","      <th>Barratt_Barratt_P2_Occ</th>\n","      <th>EHQ_EHQ_Total</th>\n","      <th>...</th>\n","      <th>196throw_199thcolumn</th>\n","      <th>197throw_198thcolumn</th>\n","      <th>197throw_199thcolumn</th>\n","      <th>198throw_199thcolumn</th>\n","      <th>missing_parent</th>\n","      <th>Harlem</th>\n","      <th>MRV</th>\n","      <th>Midtown</th>\n","      <th>Staten Island_Study</th>\n","      <th>SI RUMC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>UmrK0vMLopoR</td>\n","      <td>2016</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>40.00</td>\n","      <td>...</td>\n","      <td>0.108005</td>\n","      <td>0.148327</td>\n","      <td>0.093230</td>\n","      <td>-0.004984</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CPaeQkhcjg7d</td>\n","      <td>2019</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-94.47</td>\n","      <td>...</td>\n","      <td>0.017155</td>\n","      <td>0.088893</td>\n","      <td>0.064094</td>\n","      <td>0.194381</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nb4EetVPm3gs</td>\n","      <td>2016</td>\n","      <td>1.0</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-46.67</td>\n","      <td>...</td>\n","      <td>0.087678</td>\n","      <td>0.146221</td>\n","      <td>-0.009425</td>\n","      <td>0.035150</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>p4vPhVu91o4b</td>\n","      <td>2018</td>\n","      <td>0.0</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>30</td>\n","      <td>18</td>\n","      <td>0</td>\n","      <td>-26.68</td>\n","      <td>...</td>\n","      <td>0.154464</td>\n","      <td>0.106817</td>\n","      <td>0.065336</td>\n","      <td>0.234708</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M09PXs7arQ5E</td>\n","      <td>2019</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.00</td>\n","      <td>...</td>\n","      <td>0.025640</td>\n","      <td>0.118199</td>\n","      <td>0.112522</td>\n","      <td>0.143666</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>Atx7oub96GXS</td>\n","      <td>2019</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>87.80</td>\n","      <td>...</td>\n","      <td>0.054290</td>\n","      <td>0.101367</td>\n","      <td>0.159979</td>\n","      <td>0.149812</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>groSbUfkQngM</td>\n","      <td>2016</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>77.80</td>\n","      <td>...</td>\n","      <td>0.093136</td>\n","      <td>-0.029158</td>\n","      <td>0.084720</td>\n","      <td>0.135419</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>zmxGvIrOD0bt</td>\n","      <td>2015</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>16.68</td>\n","      <td>...</td>\n","      <td>0.051195</td>\n","      <td>0.051761</td>\n","      <td>0.010093</td>\n","      <td>0.117584</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>rOmWFuJCud5G</td>\n","      <td>2018</td>\n","      <td>0.0</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>53.40</td>\n","      <td>...</td>\n","      <td>0.093942</td>\n","      <td>0.115655</td>\n","      <td>0.106790</td>\n","      <td>0.117870</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>k8HhHnnu2wmt</td>\n","      <td>2018</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>-57.80</td>\n","      <td>...</td>\n","      <td>-0.029927</td>\n","      <td>-0.017830</td>\n","      <td>0.062416</td>\n","      <td>0.161122</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 19933 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5770a57-32de-4f58-9b1c-431b44e9f517')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a5770a57-32de-4f58-9b1c-431b44e9f517 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a5770a57-32de-4f58-9b1c-431b44e9f517');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-79a4e3b8-85c5-4269-9450-0b4f255d8d92\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-79a4e3b8-85c5-4269-9450-0b4f255d8d92')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-79a4e3b8-85c5-4269-9450-0b4f255d8d92 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d7fa245a-e476-4d8d-9a3a-98e5150c01c8\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_total')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d7fa245a-e476-4d8d-9a3a-98e5150c01c8 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_total');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_total"}},"metadata":{},"execution_count":43}],"source":["train_total['Basic_Demos_Study_Site'] = train_total['Basic_Demos_Study_Site'].astype(object)\n","train_total.loc[train_total['Basic_Demos_Study_Site'] == 1, 'Basic_Demos_Study_Site'] = 'Staten Island_Study'\n","train_total.loc[train_total['Basic_Demos_Study_Site'] == 2, 'Basic_Demos_Study_Site'] = 'MRV'\n","train_total.loc[train_total['Basic_Demos_Study_Site'] == 3, 'Basic_Demos_Study_Site'] = 'Midtown'\n","train_total.loc[train_total['Basic_Demos_Study_Site'] == 4, 'Basic_Demos_Study_Site'] = 'Harlem'\n","train_total.loc[train_total['Basic_Demos_Study_Site'] == 5, 'Basic_Demos_Study_Site'] = 'SI RUMC'\n","train_total = train_total.join(pd.get_dummies(train_total['Basic_Demos_Study_Site'], dtype=float))\n","train_total.loc[:, ['SI RUMC']] = 0.0\n","train_total = train_total.drop(['Basic_Demos_Study_Site'], axis=1)\n","train_total"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":728,"status":"ok","timestamp":1740352708158,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"mA6K0TsqtI7A","colab":{"base_uri":"https://localhost:8080/","height":496},"outputId":"e5528818-01b3-4d8c-8ebc-eaef1066ef13"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     participant_id  Basic_Demos_Enroll_Year  PreInt_Demos_Fam_Child_Race  \\\n","0      UmrK0vMLopoR                     2016                            0   \n","1      CPaeQkhcjg7d                     2019                            2   \n","2      Nb4EetVPm3gs                     2016                            8   \n","3      p4vPhVu91o4b                     2018                            8   \n","4      M09PXs7arQ5E                     2019                            1   \n","...             ...                      ...                          ...   \n","1208   Atx7oub96GXS                     2019                            0   \n","1209   groSbUfkQngM                     2016                            0   \n","1210   zmxGvIrOD0bt                     2015                            2   \n","1211   rOmWFuJCud5G                     2018                            8   \n","1212   k8HhHnnu2wmt                     2018                            2   \n","\n","      MRI_Track_Scan_Location  Barratt_Barratt_P1_Edu  Barratt_Barratt_P1_Occ  \\\n","0                           1                      21                      45   \n","1                           3                      15                      15   \n","2                           1                      18                      40   \n","3                           3                      15                      30   \n","4                           3                      15                      20   \n","...                       ...                     ...                     ...   \n","1208                        2                      21                      40   \n","1209                        1                      18                      35   \n","1210                        1                      18                      20   \n","1211                        3                      21                      40   \n","1212                        2                      21                      40   \n","\n","      Barratt_Barratt_P2_Edu  Barratt_Barratt_P2_Occ  EHQ_EHQ_Total  \\\n","0                         21                      45          40.00   \n","1                          0                       0         -94.47   \n","2                          0                       0         -46.67   \n","3                         18                       0         -26.68   \n","4                          0                       0           0.00   \n","...                      ...                     ...            ...   \n","1208                      21                      40          87.80   \n","1209                       0                       0          77.80   \n","1210                       0                       0          16.68   \n","1211                      18                      45          53.40   \n","1212                      18                      45         -57.80   \n","\n","      ColorVision_CV_Score  ...  missing_parent  Harlem  MRV  Midtown  \\\n","0                       13  ...             0.0     0.0  0.0      0.0   \n","1                       14  ...             0.0     0.0  0.0      1.0   \n","2                       14  ...             0.0     0.0  0.0      0.0   \n","3                       10  ...             0.0     0.0  0.0      1.0   \n","4                       14  ...             0.0     0.0  0.0      1.0   \n","...                    ...  ...             ...     ...  ...      ...   \n","1208                    14  ...             0.0     0.0  0.0      0.0   \n","1209                    14  ...             0.0     0.0  0.0      0.0   \n","1210                    14  ...             0.0     0.0  0.0      0.0   \n","1211                    14  ...             0.0     0.0  0.0      1.0   \n","1212                    14  ...             0.0     0.0  0.0      1.0   \n","\n","      Staten Island_Study  SI RUMC  Decline to specify  Hispanic or Latino  \\\n","0                     1.0      0.0                 0.0                 0.0   \n","1                     0.0      0.0                 0.0                 1.0   \n","2                     1.0      0.0                 0.0                 1.0   \n","3                     0.0      0.0                 0.0                 0.0   \n","4                     0.0      0.0                 0.0                 0.0   \n","...                   ...      ...                 ...                 ...   \n","1208                  1.0      0.0                 0.0                 0.0   \n","1209                  1.0      0.0                 0.0                 0.0   \n","1210                  1.0      0.0                 0.0                 1.0   \n","1211                  0.0      0.0                 0.0                 0.0   \n","1212                  0.0      0.0                 0.0                 1.0   \n","\n","      Not Hispanic or Latino  Unknown_Eth  \n","0                        1.0          0.0  \n","1                        0.0          0.0  \n","2                        0.0          0.0  \n","3                        1.0          0.0  \n","4                        1.0          0.0  \n","...                      ...          ...  \n","1208                     1.0          0.0  \n","1209                     1.0          0.0  \n","1210                     0.0          0.0  \n","1211                     1.0          0.0  \n","1212                     0.0          0.0  \n","\n","[1210 rows x 19936 columns]"],"text/html":["\n","  <div id=\"df-a12d0b7b-89be-42da-9c88-f42ce7b740fe\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>participant_id</th>\n","      <th>Basic_Demos_Enroll_Year</th>\n","      <th>PreInt_Demos_Fam_Child_Race</th>\n","      <th>MRI_Track_Scan_Location</th>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <th>Barratt_Barratt_P2_Edu</th>\n","      <th>Barratt_Barratt_P2_Occ</th>\n","      <th>EHQ_EHQ_Total</th>\n","      <th>ColorVision_CV_Score</th>\n","      <th>...</th>\n","      <th>missing_parent</th>\n","      <th>Harlem</th>\n","      <th>MRV</th>\n","      <th>Midtown</th>\n","      <th>Staten Island_Study</th>\n","      <th>SI RUMC</th>\n","      <th>Decline to specify</th>\n","      <th>Hispanic or Latino</th>\n","      <th>Not Hispanic or Latino</th>\n","      <th>Unknown_Eth</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>UmrK0vMLopoR</td>\n","      <td>2016</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>40.00</td>\n","      <td>13</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CPaeQkhcjg7d</td>\n","      <td>2019</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-94.47</td>\n","      <td>14</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nb4EetVPm3gs</td>\n","      <td>2016</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-46.67</td>\n","      <td>14</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>p4vPhVu91o4b</td>\n","      <td>2018</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>30</td>\n","      <td>18</td>\n","      <td>0</td>\n","      <td>-26.68</td>\n","      <td>10</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M09PXs7arQ5E</td>\n","      <td>2019</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.00</td>\n","      <td>14</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>Atx7oub96GXS</td>\n","      <td>2019</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>87.80</td>\n","      <td>14</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>groSbUfkQngM</td>\n","      <td>2016</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>77.80</td>\n","      <td>14</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>zmxGvIrOD0bt</td>\n","      <td>2015</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>16.68</td>\n","      <td>14</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>rOmWFuJCud5G</td>\n","      <td>2018</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>53.40</td>\n","      <td>14</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>k8HhHnnu2wmt</td>\n","      <td>2018</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>-57.80</td>\n","      <td>14</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 19936 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a12d0b7b-89be-42da-9c88-f42ce7b740fe')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a12d0b7b-89be-42da-9c88-f42ce7b740fe button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a12d0b7b-89be-42da-9c88-f42ce7b740fe');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cb3fc2e4-e916-462f-aba6-16f6351ba067\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cb3fc2e4-e916-462f-aba6-16f6351ba067')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cb3fc2e4-e916-462f-aba6-16f6351ba067 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_647d3201-2fae-4679-9686-ec2f0185a5c2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_total')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_647d3201-2fae-4679-9686-ec2f0185a5c2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_total');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_total"}},"metadata":{},"execution_count":44}],"source":["train_total['PreInt_Demos_Fam_Child_Ethnicity'] = train_total['PreInt_Demos_Fam_Child_Ethnicity'].astype(object)\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Ethnicity'] == 0, 'PreInt_Demos_Fam_Child_Ethnicity'] = 'Not Hispanic or Latino'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Ethnicity'] == 1, 'PreInt_Demos_Fam_Child_Ethnicity'] = 'Hispanic or Latino'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Ethnicity'] == 2, 'PreInt_Demos_Fam_Child_Ethnicity'] = 'Decline to specify'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Ethnicity'] == 3, 'PreInt_Demos_Fam_Child_Ethnicity'] = 'Unknown_Eth'\n","train_total = train_total.join(pd.get_dummies(train_total['PreInt_Demos_Fam_Child_Ethnicity'], dtype=float))\n","train_total = train_total.drop(['PreInt_Demos_Fam_Child_Ethnicity'], axis=1)\n","train_total"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":508,"status":"ok","timestamp":1740352708665,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"Lz_S50irtltI","colab":{"base_uri":"https://localhost:8080/","height":496},"outputId":"a872d600-87d7-400b-f737-ee63e73824ed"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     participant_id  Basic_Demos_Enroll_Year  MRI_Track_Scan_Location  \\\n","0      UmrK0vMLopoR                     2016                        1   \n","1      CPaeQkhcjg7d                     2019                        3   \n","2      Nb4EetVPm3gs                     2016                        1   \n","3      p4vPhVu91o4b                     2018                        3   \n","4      M09PXs7arQ5E                     2019                        3   \n","...             ...                      ...                      ...   \n","1208   Atx7oub96GXS                     2019                        2   \n","1209   groSbUfkQngM                     2016                        1   \n","1210   zmxGvIrOD0bt                     2015                        1   \n","1211   rOmWFuJCud5G                     2018                        3   \n","1212   k8HhHnnu2wmt                     2018                        2   \n","\n","      Barratt_Barratt_P1_Edu  Barratt_Barratt_P1_Occ  Barratt_Barratt_P2_Edu  \\\n","0                         21                      45                      21   \n","1                         15                      15                       0   \n","2                         18                      40                       0   \n","3                         15                      30                      18   \n","4                         15                      20                       0   \n","...                      ...                     ...                     ...   \n","1208                      21                      40                      21   \n","1209                      18                      35                       0   \n","1210                      18                      20                       0   \n","1211                      21                      40                      18   \n","1212                      21                      40                      18   \n","\n","      Barratt_Barratt_P2_Occ  EHQ_EHQ_Total  ColorVision_CV_Score  \\\n","0                         45          40.00                    13   \n","1                          0         -94.47                    14   \n","2                          0         -46.67                    14   \n","3                          0         -26.68                    10   \n","4                          0           0.00                    14   \n","...                      ...            ...                   ...   \n","1208                      40          87.80                    14   \n","1209                       0          77.80                    14   \n","1210                       0          16.68                    14   \n","1211                      45          53.40                    14   \n","1212                      45         -57.80                    14   \n","\n","      APQ_P_APQ_P_CP  ...  Asia  Black/African American  \\\n","0                1.0  ...   0.0                     0.0   \n","1                1.0  ...   0.0                     0.0   \n","2                1.0  ...   0.0                     0.0   \n","3                1.0  ...   0.0                     0.0   \n","4                1.0  ...   0.0                     1.0   \n","...              ...  ...   ...                     ...   \n","1208             1.0  ...   0.0                     0.0   \n","1209             1.0  ...   0.0                     0.0   \n","1210             1.0  ...   0.0                     0.0   \n","1211             1.0  ...   0.0                     0.0   \n","1212             1.0  ...   0.0                     0.0   \n","\n","      Choose not to specify  Hispanic  Indian  \\\n","0                       0.0       0.0     0.0   \n","1                       0.0       1.0     0.0   \n","2                       0.0       0.0     0.0   \n","3                       0.0       0.0     0.0   \n","4                       0.0       0.0     0.0   \n","...                     ...       ...     ...   \n","1208                    0.0       0.0     0.0   \n","1209                    0.0       0.0     0.0   \n","1210                    0.0       1.0     0.0   \n","1211                    0.0       0.0     0.0   \n","1212                    0.0       1.0     0.0   \n","\n","      Native Hawaiian/Other Pacific Islander  Other race  Two or more races  \\\n","0                                        0.0         0.0                0.0   \n","1                                        0.0         0.0                0.0   \n","2                                        0.0         0.0                1.0   \n","3                                        0.0         0.0                1.0   \n","4                                        0.0         0.0                0.0   \n","...                                      ...         ...                ...   \n","1208                                     0.0         0.0                0.0   \n","1209                                     0.0         0.0                0.0   \n","1210                                     0.0         0.0                0.0   \n","1211                                     0.0         0.0                1.0   \n","1212                                     0.0         0.0                0.0   \n","\n","      Unknown_Race  White/Caucasian  \n","0              0.0              1.0  \n","1              0.0              0.0  \n","2              0.0              0.0  \n","3              0.0              0.0  \n","4              0.0              0.0  \n","...            ...              ...  \n","1208           0.0              1.0  \n","1209           0.0              1.0  \n","1210           0.0              0.0  \n","1211           0.0              0.0  \n","1212           0.0              0.0  \n","\n","[1210 rows x 19945 columns]"],"text/html":["\n","  <div id=\"df-1148558c-1040-4628-bc0b-e0e04f5991fd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>participant_id</th>\n","      <th>Basic_Demos_Enroll_Year</th>\n","      <th>MRI_Track_Scan_Location</th>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <th>Barratt_Barratt_P2_Edu</th>\n","      <th>Barratt_Barratt_P2_Occ</th>\n","      <th>EHQ_EHQ_Total</th>\n","      <th>ColorVision_CV_Score</th>\n","      <th>APQ_P_APQ_P_CP</th>\n","      <th>...</th>\n","      <th>Asia</th>\n","      <th>Black/African American</th>\n","      <th>Choose not to specify</th>\n","      <th>Hispanic</th>\n","      <th>Indian</th>\n","      <th>Native Hawaiian/Other Pacific Islander</th>\n","      <th>Other race</th>\n","      <th>Two or more races</th>\n","      <th>Unknown_Race</th>\n","      <th>White/Caucasian</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>UmrK0vMLopoR</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>40.00</td>\n","      <td>13</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CPaeQkhcjg7d</td>\n","      <td>2019</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-94.47</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nb4EetVPm3gs</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-46.67</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>p4vPhVu91o4b</td>\n","      <td>2018</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>30</td>\n","      <td>18</td>\n","      <td>0</td>\n","      <td>-26.68</td>\n","      <td>10</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M09PXs7arQ5E</td>\n","      <td>2019</td>\n","      <td>3</td>\n","      <td>15</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.00</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>Atx7oub96GXS</td>\n","      <td>2019</td>\n","      <td>2</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>87.80</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>groSbUfkQngM</td>\n","      <td>2016</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>77.80</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>zmxGvIrOD0bt</td>\n","      <td>2015</td>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>16.68</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>rOmWFuJCud5G</td>\n","      <td>2018</td>\n","      <td>3</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>53.40</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>k8HhHnnu2wmt</td>\n","      <td>2018</td>\n","      <td>2</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>-57.80</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 19945 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1148558c-1040-4628-bc0b-e0e04f5991fd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1148558c-1040-4628-bc0b-e0e04f5991fd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1148558c-1040-4628-bc0b-e0e04f5991fd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d469e4d3-3d57-4b25-b214-ff7835da2f92\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d469e4d3-3d57-4b25-b214-ff7835da2f92')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d469e4d3-3d57-4b25-b214-ff7835da2f92 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4dfcc0ed-e3db-4e8a-97a5-37a55f8f4525\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_total')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4dfcc0ed-e3db-4e8a-97a5-37a55f8f4525 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_total');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_total"}},"metadata":{},"execution_count":45}],"source":["train_total['PreInt_Demos_Fam_Child_Race'] = train_total['PreInt_Demos_Fam_Child_Race'].astype(object)\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 0, 'PreInt_Demos_Fam_Child_Race'] = 'White/Caucasian'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 1, 'PreInt_Demos_Fam_Child_Race'] = 'Black/African American'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 2, 'PreInt_Demos_Fam_Child_Race'] = 'Hispanic'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 3, 'PreInt_Demos_Fam_Child_Race'] = 'Asia'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 4, 'PreInt_Demos_Fam_Child_Race'] = 'Indian'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 5, 'PreInt_Demos_Fam_Child_Race'] = 'Native American Indian'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 6, 'PreInt_Demos_Fam_Child_Race'] = 'American Indian/Alaskan Native'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 7, 'PreInt_Demos_Fam_Child_Race'] = 'Native Hawaiian/Other Pacific Islander'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 8, 'PreInt_Demos_Fam_Child_Race'] = 'Two or more races'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 9, 'PreInt_Demos_Fam_Child_Race'] = 'Other race'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 10, 'PreInt_Demos_Fam_Child_Race'] = 'Unknown_Race'\n","train_total.loc[train_total['PreInt_Demos_Fam_Child_Race'] == 11, 'PreInt_Demos_Fam_Child_Race'] = 'Choose not to specify'\n","train_total = train_total.join(pd.get_dummies(train_total['PreInt_Demos_Fam_Child_Race'], dtype=float))\n","train_total = train_total.drop(['PreInt_Demos_Fam_Child_Race'], axis=1)\n","train_total"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":742,"status":"ok","timestamp":1740352709408,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"EYEZFe1duffM","colab":{"base_uri":"https://localhost:8080/","height":496},"outputId":"e06e6533-c739-4341-87d2-be014f7c7fdc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     participant_id  Basic_Demos_Enroll_Year  Barratt_Barratt_P1_Edu  \\\n","0      UmrK0vMLopoR                     2016                      21   \n","1      CPaeQkhcjg7d                     2019                      15   \n","2      Nb4EetVPm3gs                     2016                      18   \n","3      p4vPhVu91o4b                     2018                      15   \n","4      M09PXs7arQ5E                     2019                      15   \n","...             ...                      ...                     ...   \n","1208   Atx7oub96GXS                     2019                      21   \n","1209   groSbUfkQngM                     2016                      18   \n","1210   zmxGvIrOD0bt                     2015                      18   \n","1211   rOmWFuJCud5G                     2018                      21   \n","1212   k8HhHnnu2wmt                     2018                      21   \n","\n","      Barratt_Barratt_P1_Occ  Barratt_Barratt_P2_Edu  Barratt_Barratt_P2_Occ  \\\n","0                         45                      21                      45   \n","1                         15                       0                       0   \n","2                         40                       0                       0   \n","3                         30                      18                       0   \n","4                         20                       0                       0   \n","...                      ...                     ...                     ...   \n","1208                      40                      21                      40   \n","1209                      35                       0                       0   \n","1210                      20                       0                       0   \n","1211                      40                      18                      45   \n","1212                      40                      18                      45   \n","\n","      EHQ_EHQ_Total  ColorVision_CV_Score  APQ_P_APQ_P_CP  APQ_P_APQ_P_ID  \\\n","0             40.00                    13             1.0             1.0   \n","1            -94.47                    14             1.0             2.0   \n","2            -46.67                    14             1.0             1.0   \n","3            -26.68                    10             1.0             2.0   \n","4              0.00                    14             1.0             2.0   \n","...             ...                   ...             ...             ...   \n","1208          87.80                    14             1.0             2.0   \n","1209          77.80                    14             1.0             1.0   \n","1210          16.68                    14             1.0             3.0   \n","1211          53.40                    14             1.0             2.0   \n","1212         -57.80                    14             1.0             2.0   \n","\n","      ...  Indian  Native Hawaiian/Other Pacific Islander  Other race  \\\n","0     ...     0.0                                     0.0         0.0   \n","1     ...     0.0                                     0.0         0.0   \n","2     ...     0.0                                     0.0         0.0   \n","3     ...     0.0                                     0.0         0.0   \n","4     ...     0.0                                     0.0         0.0   \n","...   ...     ...                                     ...         ...   \n","1208  ...     0.0                                     0.0         0.0   \n","1209  ...     0.0                                     0.0         0.0   \n","1210  ...     0.0                                     0.0         0.0   \n","1211  ...     0.0                                     0.0         0.0   \n","1212  ...     0.0                                     0.0         0.0   \n","\n","      Two or more races  Unknown_Race  White/Caucasian  CBIC  CUNY  RUBIC  \\\n","0                   0.0           0.0              1.0   0.0   0.0    0.0   \n","1                   0.0           0.0              0.0   1.0   0.0    0.0   \n","2                   1.0           0.0              0.0   0.0   0.0    0.0   \n","3                   1.0           0.0              0.0   1.0   0.0    0.0   \n","4                   0.0           0.0              0.0   1.0   0.0    0.0   \n","...                 ...           ...              ...   ...   ...    ...   \n","1208                0.0           0.0              1.0   0.0   0.0    1.0   \n","1209                0.0           0.0              1.0   0.0   0.0    0.0   \n","1210                0.0           0.0              0.0   0.0   0.0    0.0   \n","1211                1.0           0.0              0.0   1.0   0.0    0.0   \n","1212                0.0           0.0              0.0   0.0   0.0    1.0   \n","\n","      Staten Island_Scan  \n","0                    1.0  \n","1                    0.0  \n","2                    1.0  \n","3                    0.0  \n","4                    0.0  \n","...                  ...  \n","1208                 0.0  \n","1209                 1.0  \n","1210                 1.0  \n","1211                 0.0  \n","1212                 0.0  \n","\n","[1210 rows x 19948 columns]"],"text/html":["\n","  <div id=\"df-3a3b8b82-699d-4b8c-95fc-8d54eb593896\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>participant_id</th>\n","      <th>Basic_Demos_Enroll_Year</th>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <th>Barratt_Barratt_P2_Edu</th>\n","      <th>Barratt_Barratt_P2_Occ</th>\n","      <th>EHQ_EHQ_Total</th>\n","      <th>ColorVision_CV_Score</th>\n","      <th>APQ_P_APQ_P_CP</th>\n","      <th>APQ_P_APQ_P_ID</th>\n","      <th>...</th>\n","      <th>Indian</th>\n","      <th>Native Hawaiian/Other Pacific Islander</th>\n","      <th>Other race</th>\n","      <th>Two or more races</th>\n","      <th>Unknown_Race</th>\n","      <th>White/Caucasian</th>\n","      <th>CBIC</th>\n","      <th>CUNY</th>\n","      <th>RUBIC</th>\n","      <th>Staten Island_Scan</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>UmrK0vMLopoR</td>\n","      <td>2016</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>21</td>\n","      <td>45</td>\n","      <td>40.00</td>\n","      <td>13</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CPaeQkhcjg7d</td>\n","      <td>2019</td>\n","      <td>15</td>\n","      <td>15</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-94.47</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nb4EetVPm3gs</td>\n","      <td>2016</td>\n","      <td>18</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-46.67</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>p4vPhVu91o4b</td>\n","      <td>2018</td>\n","      <td>15</td>\n","      <td>30</td>\n","      <td>18</td>\n","      <td>0</td>\n","      <td>-26.68</td>\n","      <td>10</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M09PXs7arQ5E</td>\n","      <td>2019</td>\n","      <td>15</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.00</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>Atx7oub96GXS</td>\n","      <td>2019</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>87.80</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>groSbUfkQngM</td>\n","      <td>2016</td>\n","      <td>18</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>77.80</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>zmxGvIrOD0bt</td>\n","      <td>2015</td>\n","      <td>18</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>16.68</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>rOmWFuJCud5G</td>\n","      <td>2018</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>53.40</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>k8HhHnnu2wmt</td>\n","      <td>2018</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>18</td>\n","      <td>45</td>\n","      <td>-57.80</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 19948 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a3b8b82-699d-4b8c-95fc-8d54eb593896')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3a3b8b82-699d-4b8c-95fc-8d54eb593896 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3a3b8b82-699d-4b8c-95fc-8d54eb593896');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-64542e9a-7e54-4e94-a026-ded495dd84f8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-64542e9a-7e54-4e94-a026-ded495dd84f8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-64542e9a-7e54-4e94-a026-ded495dd84f8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f85c07c7-d888-4339-ad80-330eeed38a15\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_total')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f85c07c7-d888-4339-ad80-330eeed38a15 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_total');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_total"}},"metadata":{},"execution_count":46}],"source":["train_total['MRI_Track_Scan_Location'] = train_total['MRI_Track_Scan_Location'].astype(object)\n","train_total.loc[train_total['MRI_Track_Scan_Location'] == 1, 'MRI_Track_Scan_Location'] = 'Staten Island_Scan'\n","train_total.loc[train_total['MRI_Track_Scan_Location'] == 2, 'MRI_Track_Scan_Location'] = 'RUBIC'\n","train_total.loc[train_total['MRI_Track_Scan_Location'] == 3, 'MRI_Track_Scan_Location'] = 'CBIC'\n","train_total.loc[train_total['MRI_Track_Scan_Location'] == 4, 'MRI_Track_Scan_Location'] = 'CUNY'\n","train_total = train_total.join(pd.get_dummies(train_total['MRI_Track_Scan_Location'], dtype=float))\n","train_total = train_total.drop(['MRI_Track_Scan_Location'], axis=1)\n","train_total"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":588,"status":"ok","timestamp":1740352709997,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"jsSU9nNBwm2m","colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"8c4b0499-9bc2-4348-c289-09ea87038c79"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["ext_soln = train_total[['participant_id', 'SDQ_SDQ_Externalizing']].join(training_solutions.set_index('participant_id'), on='participant_id')\n","ax = sns.barplot(x='ADHD_Outcome', y='SDQ_SDQ_Externalizing', data=ext_soln, hue='Sex_F', palette='deep')\n","plt.title('Relation between ADHD Outcome and Externalizing Score Based on Sex')\n","plt.xlabel('ADHD Outcome')\n","plt.ylabel('Externalizing Score')\n","plt.xticks([0, 1], ['Negative', 'Positive'])\n","handles, labels = ax.get_legend_handles_labels()\n","new_labels = ['Male', 'Female']\n","ax.legend(handles, new_labels)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":802,"status":"ok","timestamp":1740352710799,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"fb14PE8dx4pR","colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"46560336-a5ff-4343-ce8f-379699fe2176"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cond_soln = train_total[['participant_id', 'SDQ_SDQ_Conduct_Problems']].join(training_solutions.set_index('participant_id'), on='participant_id')\n","ax = sns.barplot(x='ADHD_Outcome', y='SDQ_SDQ_Conduct_Problems', data=cond_soln, hue='Sex_F', palette='deep')\n","plt.title('Relation between ADHD Outcome and Conduct Problems')\n","plt.xlabel('ADHD Outcome')\n","plt.ylabel('Conduct Problems')\n","plt.xticks([0, 1], ['Negative', 'Positive'])\n","handles, labels = ax.get_legend_handles_labels()\n","new_labels = ['Male', 'Female']\n","ax.legend(handles, new_labels)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":625,"status":"ok","timestamp":1740352711423,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"0BEipMemyGY2","colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"bc322a1a-4cd5-432f-aab2-5e7cc74f8a6a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["hyper_soln = train_total[['participant_id', 'SDQ_SDQ_Hyperactivity']].join(training_solutions.set_index('participant_id'), on='participant_id')\n","ax = sns.barplot(x='ADHD_Outcome', y='SDQ_SDQ_Hyperactivity', data=hyper_soln, hue='Sex_F', palette='deep')\n","plt.title('Relation between ADHD Outcome and Conduct Problems')\n","plt.xlabel('ADHD Outcome')\n","plt.ylabel('Conduct Problems')\n","plt.xticks([0, 1], ['Negative', 'Positive'])\n","handles, labels = ax.get_legend_handles_labels()\n","new_labels = ['Male', 'Female']\n","ax.legend(handles, new_labels)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":432,"status":"ok","timestamp":1740352711855,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"yHbPeGKX3Lgn","colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"4855ffcd-8f84-4ce3-edd5-c6a12aac267e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["int_soln = train_total[['participant_id', 'SDQ_SDQ_Internalizing']].join(training_solutions.set_index('participant_id'), on='participant_id')\n","ax = sns.barplot(x='ADHD_Outcome', y='SDQ_SDQ_Internalizing', data=int_soln, hue='Sex_F', palette='deep')\n","plt.title('Relation between ADHD Outcome and Internalizing Score Based on Sex')\n","plt.xlabel('ADHD Outcome')\n","plt.ylabel('Internalizing Score')\n","plt.xticks([0, 1], ['Negative', 'Positive'])\n","handles, labels = ax.get_legend_handles_labels()\n","new_labels = ['Male', 'Female']\n","ax.legend(handles, new_labels)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":509,"status":"ok","timestamp":1740352712364,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"Y9XQV1L63iG0","colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"3fc862da-9da6-4aef-c209-80ed4a44cc4e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["emot_soln = train_total[['participant_id', 'SDQ_SDQ_Emotional_Problems']].join(training_solutions.set_index('participant_id'), on='participant_id')\n","ax = sns.barplot(x='ADHD_Outcome', y='SDQ_SDQ_Emotional_Problems', data=emot_soln, hue='Sex_F', palette='deep')\n","plt.title('Relation between ADHD Outcome and Emotional Problems Based on Sex')\n","plt.xlabel('ADHD Outcome')\n","plt.ylabel('Emotional Problems')\n","plt.xticks([0, 1], ['Negative', 'Positive'])\n","handles, labels = ax.get_legend_handles_labels()\n","new_labels = ['Male', 'Female']\n","ax.legend(handles, new_labels)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":865,"status":"ok","timestamp":1740352713230,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"0D-sMl374MV-","colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"8f28b86a-9b4c-4083-c0bc-f4cfc1eba2ac"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["peer_soln = train_total[['participant_id', 'SDQ_SDQ_Peer_Problems']].join(training_solutions.set_index('participant_id'), on='participant_id')\n","ax = sns.barplot(x='ADHD_Outcome', y='SDQ_SDQ_Peer_Problems', data=peer_soln, hue='Sex_F', palette='deep')\n","plt.title('Relation between ADHD Outcome and Peer Problems Based on Sex')\n","plt.xlabel('ADHD Outcome')\n","plt.ylabel('Peer Problems')\n","plt.xticks([0, 1], ['Negative', 'Positive'])\n","handles, labels = ax.get_legend_handles_labels()\n","new_labels = ['Male', 'Female']\n","ax.legend(handles, new_labels)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":57,"status":"ok","timestamp":1740352713288,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"D2j_0I627Xbz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7799efce-764e-46eb-8ef1-b327503038a9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation = 0.8335311722766346 P-value = 1.41564281147e-313\n"]}],"source":["correlation, p_value = pearsonr(train_total['SDQ_SDQ_Internalizing'], train_total['SDQ_SDQ_Emotional_Problems'])\n","print(\"Correlation =\", correlation, \"P-value =\", p_value)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1740352713293,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"7GZ42zGz7pX_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"29a36b45-d90d-4d81-9c6d-391d6b0e53de"},"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation = 0.8197046331911642 P-value = 1.2653378605055951e-294\n"]}],"source":["correlation, p_value = pearsonr(train_total['SDQ_SDQ_Internalizing'], train_total['SDQ_SDQ_Peer_Problems'])\n","print(\"Correlation =\", correlation, \"P-value =\", p_value)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":33,"status":"ok","timestamp":1740352713327,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"3YGIwwVN7wcd","colab":{"base_uri":"https://localhost:8080/"},"outputId":"67925ec9-a06d-496d-f06a-906be639ca3b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation = 0.3668006439114569 P-value = 7.770944575842268e-40\n"]}],"source":["correlation, p_value = pearsonr(train_total['SDQ_SDQ_Emotional_Problems'], train_total['SDQ_SDQ_Peer_Problems'])\n","print(\"Correlation =\", correlation, \"P-value =\", p_value)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":356,"status":"ok","timestamp":1740352713682,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"Xu4TPKLU73j3","colab":{"base_uri":"https://localhost:8080/"},"outputId":"05c9a175-734e-487b-e39f-1309c4338c78"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1210, 19945)"]},"metadata":{},"execution_count":56}],"source":["train_total = train_total.drop(['SDQ_SDQ_Difficulties_Total'], axis=1)\n","train_total = train_total.drop(['SDQ_SDQ_Internalizing'], axis=1)\n","train_total = train_total.drop(['SDQ_SDQ_Externalizing'], axis=1)\n","train_total.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":1844,"status":"ok","timestamp":1740352715525,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"affx4754Sixl","colab":{"base_uri":"https://localhost:8080/","height":458},"outputId":"5f780105-cb33-492c-f49e-1bf526933a0f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["participant_id              object\n","Basic_Demos_Enroll_Year      int64\n","Barratt_Barratt_P1_Edu     float64\n","Barratt_Barratt_P1_Occ     float64\n","Barratt_Barratt_P2_Edu     float64\n","                            ...   \n","White/Caucasian            float64\n","CBIC                       float64\n","CUNY                       float64\n","RUBIC                      float64\n","Staten Island_Scan         float64\n","Length: 19945, dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>participant_id</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>Basic_Demos_Enroll_Year</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>Barratt_Barratt_P2_Edu</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>White/Caucasian</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>CBIC</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>CUNY</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>RUBIC</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>Staten Island_Scan</th>\n","      <td>float64</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>19945 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":57}],"source":["not_floats = ['participant_id', 'Basic_Demos_Enroll_Year']\n","for col in train_total.columns:\n","  if train_total[col].dtype != 'float64' and col not in not_floats:\n","    train_total[col] = train_total[col].astype('float64')\n","\n","train_total.dtypes"]},{"cell_type":"markdown","metadata":{"id":"lGDzVsVneYfR"},"source":["#**Data Modeling**#"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":217,"status":"ok","timestamp":1740352715743,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"YtADWic_eGV0","colab":{"base_uri":"https://localhost:8080/","height":496},"outputId":"d0ad046f-a56a-4cf7-eac8-8cb3082dc764"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Basic_Demos_Enroll_Year  Barratt_Barratt_P1_Edu  Barratt_Barratt_P1_Occ  \\\n","0                        2016                    21.0                    45.0   \n","1                        2019                    15.0                    15.0   \n","2                        2016                    18.0                    40.0   \n","3                        2018                    15.0                    30.0   \n","4                        2019                    15.0                    20.0   \n","...                       ...                     ...                     ...   \n","1208                     2019                    21.0                    40.0   \n","1209                     2016                    18.0                    35.0   \n","1210                     2015                    18.0                    20.0   \n","1211                     2018                    21.0                    40.0   \n","1212                     2018                    21.0                    40.0   \n","\n","      Barratt_Barratt_P2_Edu  Barratt_Barratt_P2_Occ  EHQ_EHQ_Total  \\\n","0                       21.0                    45.0          40.00   \n","1                        0.0                     0.0         -94.47   \n","2                        0.0                     0.0         -46.67   \n","3                       18.0                     0.0         -26.68   \n","4                        0.0                     0.0           0.00   \n","...                      ...                     ...            ...   \n","1208                    21.0                    40.0          87.80   \n","1209                     0.0                     0.0          77.80   \n","1210                     0.0                     0.0          16.68   \n","1211                    18.0                    45.0          53.40   \n","1212                    18.0                    45.0         -57.80   \n","\n","      ColorVision_CV_Score  APQ_P_APQ_P_CP  APQ_P_APQ_P_ID  APQ_P_APQ_P_INV  \\\n","0                     13.0             1.0             1.0              7.0   \n","1                     14.0             1.0             2.0              5.0   \n","2                     14.0             1.0             1.0              5.0   \n","3                     10.0             1.0             2.0              5.0   \n","4                     14.0             1.0             2.0              6.0   \n","...                    ...             ...             ...              ...   \n","1208                  14.0             1.0             2.0              5.0   \n","1209                  14.0             1.0             1.0              4.0   \n","1210                  14.0             1.0             3.0              4.0   \n","1211                  14.0             1.0             2.0              5.0   \n","1212                  14.0             1.0             2.0              6.0   \n","\n","      ...  Indian  Native Hawaiian/Other Pacific Islander  Other race  \\\n","0     ...     0.0                                     0.0         0.0   \n","1     ...     0.0                                     0.0         0.0   \n","2     ...     0.0                                     0.0         0.0   \n","3     ...     0.0                                     0.0         0.0   \n","4     ...     0.0                                     0.0         0.0   \n","...   ...     ...                                     ...         ...   \n","1208  ...     0.0                                     0.0         0.0   \n","1209  ...     0.0                                     0.0         0.0   \n","1210  ...     0.0                                     0.0         0.0   \n","1211  ...     0.0                                     0.0         0.0   \n","1212  ...     0.0                                     0.0         0.0   \n","\n","      Two or more races  Unknown_Race  White/Caucasian  CBIC  CUNY  RUBIC  \\\n","0                   0.0           0.0              1.0   0.0   0.0    0.0   \n","1                   0.0           0.0              0.0   1.0   0.0    0.0   \n","2                   1.0           0.0              0.0   0.0   0.0    0.0   \n","3                   1.0           0.0              0.0   1.0   0.0    0.0   \n","4                   0.0           0.0              0.0   1.0   0.0    0.0   \n","...                 ...           ...              ...   ...   ...    ...   \n","1208                0.0           0.0              1.0   0.0   0.0    1.0   \n","1209                0.0           0.0              1.0   0.0   0.0    0.0   \n","1210                0.0           0.0              0.0   0.0   0.0    0.0   \n","1211                1.0           0.0              0.0   1.0   0.0    0.0   \n","1212                0.0           0.0              0.0   0.0   0.0    1.0   \n","\n","      Staten Island_Scan  \n","0                    1.0  \n","1                    0.0  \n","2                    1.0  \n","3                    0.0  \n","4                    0.0  \n","...                  ...  \n","1208                 0.0  \n","1209                 1.0  \n","1210                 1.0  \n","1211                 0.0  \n","1212                 0.0  \n","\n","[1210 rows x 19944 columns]"],"text/html":["\n","  <div id=\"df-dc069829-eda0-4bd0-87ae-5d328c0f2a7a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Basic_Demos_Enroll_Year</th>\n","      <th>Barratt_Barratt_P1_Edu</th>\n","      <th>Barratt_Barratt_P1_Occ</th>\n","      <th>Barratt_Barratt_P2_Edu</th>\n","      <th>Barratt_Barratt_P2_Occ</th>\n","      <th>EHQ_EHQ_Total</th>\n","      <th>ColorVision_CV_Score</th>\n","      <th>APQ_P_APQ_P_CP</th>\n","      <th>APQ_P_APQ_P_ID</th>\n","      <th>APQ_P_APQ_P_INV</th>\n","      <th>...</th>\n","      <th>Indian</th>\n","      <th>Native Hawaiian/Other Pacific Islander</th>\n","      <th>Other race</th>\n","      <th>Two or more races</th>\n","      <th>Unknown_Race</th>\n","      <th>White/Caucasian</th>\n","      <th>CBIC</th>\n","      <th>CUNY</th>\n","      <th>RUBIC</th>\n","      <th>Staten Island_Scan</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2016</td>\n","      <td>21.0</td>\n","      <td>45.0</td>\n","      <td>21.0</td>\n","      <td>45.0</td>\n","      <td>40.00</td>\n","      <td>13.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>7.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2019</td>\n","      <td>15.0</td>\n","      <td>15.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-94.47</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2016</td>\n","      <td>18.0</td>\n","      <td>40.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-46.67</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>5.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018</td>\n","      <td>15.0</td>\n","      <td>30.0</td>\n","      <td>18.0</td>\n","      <td>0.0</td>\n","      <td>-26.68</td>\n","      <td>10.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2019</td>\n","      <td>15.0</td>\n","      <td>20.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>6.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>2019</td>\n","      <td>21.0</td>\n","      <td>40.0</td>\n","      <td>21.0</td>\n","      <td>40.0</td>\n","      <td>87.80</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>2016</td>\n","      <td>18.0</td>\n","      <td>35.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>77.80</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>2015</td>\n","      <td>18.0</td>\n","      <td>20.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>16.68</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>2018</td>\n","      <td>21.0</td>\n","      <td>40.0</td>\n","      <td>18.0</td>\n","      <td>45.0</td>\n","      <td>53.40</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>2018</td>\n","      <td>21.0</td>\n","      <td>40.0</td>\n","      <td>18.0</td>\n","      <td>45.0</td>\n","      <td>-57.80</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>6.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 19944 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc069829-eda0-4bd0-87ae-5d328c0f2a7a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dc069829-eda0-4bd0-87ae-5d328c0f2a7a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dc069829-eda0-4bd0-87ae-5d328c0f2a7a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-082a168f-ff45-4ff0-900a-8eacd1cf61f6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-082a168f-ff45-4ff0-900a-8eacd1cf61f6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-082a168f-ff45-4ff0-900a-8eacd1cf61f6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_ef44d8b7-f948-437c-90bd-89d9274d410f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_features')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ef44d8b7-f948-437c-90bd-89d9274d410f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('new_features');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"new_features"}},"metadata":{},"execution_count":58}],"source":["new_features = train_total.drop(['participant_id'], axis=1)\n","new_features"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":158,"status":"ok","timestamp":1740352715902,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"75XerMueeNea","colab":{"base_uri":"https://localhost:8080/","height":424},"outputId":"fb000916-8463-4c3f-f3a1-6e1d496c1e1f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      ADHD_Outcome  Sex_F\n","0                1      1\n","1                1      0\n","2                1      0\n","3                1      1\n","4                1      1\n","...            ...    ...\n","1208             0      0\n","1209             0      1\n","1210             0      1\n","1211             0      0\n","1212             0      0\n","\n","[1210 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-4c9514bc-21d4-412d-8313-f4b71c1dbef6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ADHD_Outcome</th>\n","      <th>Sex_F</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1209</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1210</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1211</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1212</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1210 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c9514bc-21d4-412d-8313-f4b71c1dbef6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4c9514bc-21d4-412d-8313-f4b71c1dbef6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4c9514bc-21d4-412d-8313-f4b71c1dbef6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d4352619-9215-46a7-a9f7-fe0eca47c753\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d4352619-9215-46a7-a9f7-fe0eca47c753')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d4352619-9215-46a7-a9f7-fe0eca47c753 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d031d02c-f574-4a50-b119-5d392777cdf8\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_labels')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d031d02c-f574-4a50-b119-5d392777cdf8 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('new_labels');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"new_labels","summary":"{\n  \"name\": \"new_labels\",\n  \"rows\": 1210,\n  \"fields\": [\n    {\n      \"column\": \"ADHD_Outcome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":59}],"source":["new_labels = training_solutions.drop(['participant_id'], axis=1)\n","new_labels"]},{"cell_type":"code","source":["new_labels.isnull().sum()\n","# train_total[col].isnull().sum()"],"metadata":{"id":"ChsEAZbHCU5P","executionInfo":{"status":"ok","timestamp":1740352715905,"user_tz":360,"elapsed":2,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/","height":147},"outputId":"ef920d64-4e73-4946-c30e-fcb52e16b6ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ADHD_Outcome    0\n","Sex_F           0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>ADHD_Outcome</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Sex_F</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["np.unique(new_labels['ADHD_Outcome'])"],"metadata":{"id":"XoOT37pGoV_D","executionInfo":{"status":"ok","timestamp":1740352715911,"user_tz":360,"elapsed":5,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"44278c2f-96ed-4204-a3f6-45e77d54a6c1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1])"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["new_labels['ADHD_Outcome'].value_counts()"],"metadata":{"id":"jFZqWIH8pUoE","executionInfo":{"status":"ok","timestamp":1740352715959,"user_tz":360,"elapsed":47,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/","height":178},"outputId":"957a4f53-b913-4c7f-bf99-25de2bf08ec9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ADHD_Outcome\n","1    829\n","0    381\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>ADHD_Outcome</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>829</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>381</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["np.unique(new_labels['Sex_F'])"],"metadata":{"id":"3HWvWWSwohhG","executionInfo":{"status":"ok","timestamp":1740352715969,"user_tz":360,"elapsed":9,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5e770fde-6d7f-4980-d4f2-551715cddbdc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1])"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["new_labels['Sex_F'].value_counts()"],"metadata":{"id":"l1vfp7yJp1o2","executionInfo":{"status":"ok","timestamp":1740352716023,"user_tz":360,"elapsed":57,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/","height":178},"outputId":"f01965a0-4a93-48d0-959c-0a36706efc61"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sex_F\n","0    795\n","1    415\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Sex_F</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>795</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>415</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1ucxqFpYdydA","executionInfo":{"status":"ok","timestamp":1740352723528,"user_tz":360,"elapsed":7560,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b76c88a0-9e52-4de7-f96d-28910ced1f25"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting iterative-stratification\n","  Downloading iterative_stratification-0.1.9-py3-none-any.whl.metadata (1.3 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from iterative-stratification) (1.26.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from iterative-stratification) (1.13.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (from iterative-stratification) (1.6.1)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->iterative-stratification) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->iterative-stratification) (3.5.0)\n","Downloading iterative_stratification-0.1.9-py3-none-any.whl (8.5 kB)\n","Installing collected packages: iterative-stratification\n","Successfully installed iterative-stratification-0.1.9\n"]}],"source":["from sklearn.naive_bayes import GaussianNB\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.model_selection import cross_val_score\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from sklearn.multioutput import MultiOutputClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.pipeline import Pipeline\n","from sklearn.svm import SVC\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","!pip install iterative-stratification\n","from iterstrat.ml_stratifiers import MultilabelStratifiedKFold\n","from copy import deepcopy\n","from sklearn.model_selection import cross_validate\n","from xgboost import XGBClassifier"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"brnDFvwTbRnE"},"outputs":[],"source":["def run_cross_val(param, model, num_loops_outer, num_loops_inner, data_feature, data_label, n_iter_g=10):\n","  inner_folds = MultilabelStratifiedKFold(n_splits=num_loops_inner, shuffle=True, random_state=42)\n","  outer_folds = MultilabelStratifiedKFold(n_splits=num_loops_outer, shuffle=True, random_state=42)\n","  grid_search = RandomizedSearchCV(model, param, cv=inner_folds, scoring='f1_micro', n_jobs=4, n_iter=n_iter_g, error_score='raise')\n","  csv = cross_val_score(grid_search, data_feature, data_label, cv=outer_folds)\n","  return csv.mean()"]},{"cell_type":"markdown","source":["**Bin**"],"metadata":{"id":"CqASYe9qyYYn"}},{"cell_type":"code","source":["new_features_bin = deepcopy(new_features)\n","new_features_bin.loc[new_features_bin['EHQ_EHQ_Total'] == -100, 'EHQ_EHQ_Total'] = -10\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= -100) & (new_features_bin['EHQ_EHQ_Total'] < -92), 'EHQ_EHQ_Total'] = -8\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= -92) & (new_features_bin['EHQ_EHQ_Total'] < -90), 'EHQ_EHQ_Total'] = -8\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= -90) & (new_features_bin['EHQ_EHQ_Total'] < -87), 'EHQ_EHQ_Total'] = -7\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= -87) & (new_features_bin['EHQ_EHQ_Total'] < -83), 'EHQ_EHQ_Total'] = -6\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= -83) & (new_features_bin['EHQ_EHQ_Total'] < -76), 'EHQ_EHQ_Total'] = -5\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= -76) & (new_features_bin['EHQ_EHQ_Total'] < -66), 'EHQ_EHQ_Total'] = -4\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= -66) & (new_features_bin['EHQ_EHQ_Total'] < -54), 'EHQ_EHQ_Total'] = -3\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= -54) & (new_features_bin['EHQ_EHQ_Total'] < -42), 'EHQ_EHQ_Total'] = -2\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= -42) & (new_features_bin['EHQ_EHQ_Total'] < -28), 'EHQ_EHQ_Total'] = -1\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= -28) & (new_features_bin['EHQ_EHQ_Total'] < 48), 'EHQ_EHQ_Total'] = 0\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= 48) & (new_features_bin['EHQ_EHQ_Total'] < 60), 'EHQ_EHQ_Total'] = 1\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= 60) & (new_features_bin['EHQ_EHQ_Total'] < 68), 'EHQ_EHQ_Total'] = 2\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= 68) & (new_features_bin['EHQ_EHQ_Total'] < 74), 'EHQ_EHQ_Total'] = 3\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= 74) & (new_features_bin['EHQ_EHQ_Total'] < 80), 'EHQ_EHQ_Total'] = 4\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= 80) & (new_features_bin['EHQ_EHQ_Total'] < 84), 'EHQ_EHQ_Total'] = 5\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= 84) & (new_features_bin['EHQ_EHQ_Total'] < 88), 'EHQ_EHQ_Total'] = 6\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= 88) & (new_features_bin['EHQ_EHQ_Total'] < 92), 'EHQ_EHQ_Total'] = 7\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= 92) & (new_features_bin['EHQ_EHQ_Total'] < 95), 'EHQ_EHQ_Total'] = 8\n","new_features_bin.loc[(new_features_bin['EHQ_EHQ_Total'] >= 95) & (new_features_bin['EHQ_EHQ_Total'] < 100), 'EHQ_EHQ_Total'] = 9\n","new_features_bin.loc[new_features_bin['EHQ_EHQ_Total'] == 100, 'EHQ_EHQ_Total'] = 10\n","new_features_bin['EHQ_EHQ_Total'] = new_features_bin['EHQ_EHQ_Total'].astype('float64')\n","new_features_bin['EHQ_EHQ_Total'].value_counts()"],"metadata":{"id":"0cGx2SBKH4Y6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bins = [-1, 2, 5, 8, 11, 14]\n","binned = pd.cut(new_features_bin['ColorVision_CV_Score'], bins, labels=[0, 1, 2, 3, 4])\n","binned = binned.astype('float64')\n","new_features_bin = new_features_bin.assign(ColorVision_CV_Score=new_features_bin['ColorVision_CV_Score'].astype('float64'))\n","new_features_bin.loc[:, 'ColorVision_CV_Score'] = binned\n","new_features_bin['ColorVision_CV_Score'].value_counts()"],"metadata":{"id":"_iml6frAXZX8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bins = [-1, 2, 5, 8, 10]\n","binned = pd.cut(new_features_bin['SDQ_SDQ_Conduct_Problems'], bins, labels=[0, 1, 2, 3])\n","binned = binned.astype('float64')\n","new_features_bin = new_features_bin.assign(SDQ_SDQ_Conduct_Problems=new_features_bin['SDQ_SDQ_Conduct_Problems'].astype('float64'))\n","new_features_bin.loc[:, 'SDQ_SDQ_Conduct_Problems'] = binned\n","new_features_bin['SDQ_SDQ_Conduct_Problems'].value_counts()"],"metadata":{"id":"F-EWbMCbYTIg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bins = [-1, 2, 5, 8, 10]\n","binned = pd.cut(new_features_bin['SDQ_SDQ_Emotional_Problems'], bins, labels=[0, 1, 2, 3])\n","binned = binned.astype('float64')\n","new_features_bin = new_features_bin.assign(SDQ_SDQ_Emotional_Problems=new_features_bin['SDQ_SDQ_Emotional_Problems'].astype('float64'))\n","new_features_bin.loc[:, 'SDQ_SDQ_Emotional_Problems'] = binned\n","new_features_bin['SDQ_SDQ_Emotional_Problems'].value_counts()"],"metadata":{"id":"mPYX0ae3aGkl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bins = [-1, 2, 5, 8, 10]\n","binned = pd.cut(new_features_bin['SDQ_SDQ_Generating_Impact'], bins, labels=[0, 1, 2, 3])\n","binned = binned.astype('float64')\n","new_features_bin = new_features_bin.assign(SDQ_SDQ_Generating_Impact=new_features_bin['SDQ_SDQ_Generating_Impact'].astype('float64'))\n","new_features_bin.loc[:, 'SDQ_SDQ_Generating_Impact'] = binned\n","new_features_bin['SDQ_SDQ_Generating_Impact'].value_counts()"],"metadata":{"id":"KemZ9t0jtpbs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bins = [-1, 2, 5, 8, 10]\n","binned = pd.cut(new_features_bin['SDQ_SDQ_Hyperactivity'], bins, labels=[0, 1, 2, 3])\n","binned = binned.astype('float64')\n","new_features_bin = new_features_bin.assign(SDQ_SDQ_Hyperactivity=new_features_bin['SDQ_SDQ_Hyperactivity'].astype('float64'))\n","new_features_bin.loc[:, 'SDQ_SDQ_Hyperactivity'] = binned\n","new_features_bin['SDQ_SDQ_Hyperactivity'].value_counts()"],"metadata":{"id":"cervZwAkue5R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bins = [-1, 2, 5, 8, 10]\n","binned = pd.cut(new_features_bin['SDQ_SDQ_Peer_Problems'], bins, labels=[0, 1, 2, 3])\n","binned = binned.astype('float64')\n","new_features_bin = new_features_bin.assign(SDQ_SDQ_Peer_Problems=new_features_bin['SDQ_SDQ_Peer_Problems'].astype('float64'))\n","new_features_bin.loc[:, 'SDQ_SDQ_Peer_Problems'] = binned\n","new_features_bin['SDQ_SDQ_Peer_Problems'].value_counts()"],"metadata":{"id":"m51B-QGhum8G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bins = [-1, 2, 5, 8, 10]\n","binned = pd.cut(new_features_bin['SDQ_SDQ_Prosocial'], bins, labels=[0, 1, 2, 3])\n","binned = binned.astype('float64')\n","new_features_bin = new_features_bin.assign(SDQ_SDQ_Prosocial=new_features_bin['SDQ_SDQ_Prosocial'].astype('float64'))\n","new_features_bin.loc[:, 'SDQ_SDQ_Prosocial'] = binned\n","new_features_bin['SDQ_SDQ_Prosocial'].value_counts()"],"metadata":{"id":"Apci4ZrLusry"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bins = [4, 9, 14, 19, 22]\n","binned = pd.cut(new_features_bin['MRI_Track_Age_at_Scan'], bins, labels=[0, 1, 2, 3])\n","binned = binned.astype('float64')\n","new_features_bin = new_features_bin.assign(MRI_Track_Age_at_Scan=new_features_bin['MRI_Track_Age_at_Scan'].astype('float64'))\n","new_features_bin.loc[:, 'MRI_Track_Age_at_Scan'] = binned\n","new_features_bin['MRI_Track_Age_at_Scan'].value_counts()"],"metadata":{"id":"d521Ksdyuz_T"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2287239,"status":"ok","timestamp":1738895889305,"user":{"displayName":"Hima T","userId":"08119970343853958504"},"user_tz":360},"id":"GJayMh1Tc8jW","outputId":"d832043b-9625-4f91-9a60-6f18d7173a57"},"outputs":[{"output_type":"stream","name":"stdout","text":["KNN Avg Score:  68.84211235107165\n"]}],"source":["# K-Nearest Neighbors\n","\n","param = {\n","    'pca__n_components': list(range(100, 700, 100)),\n","    'classifier__estimator__n_neighbors': list(range(5, 12))\n","}\n","\n","scaler = StandardScaler()\n","pca = PCA()\n","classifier = KNeighborsClassifier(algorithm='kd_tree')\n","pipeline = Pipeline([('scaler', scaler), ('pca', pca), ('classifier', MultiOutputClassifier(classifier))])\n","\n","csv_score = run_cross_val(param, pipeline, 5, 5, new_features, new_labels)\n","\n","print(\"KNN Avg Score: \", (csv_score.mean() * 100))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"on1jQQtddbcx","outputId":"da27404d-3c32-4a76-9679-58ff014a39fe","executionInfo":{"status":"ok","timestamp":1738896663644,"user_tz":360,"elapsed":774340,"user":{"displayName":"Hima T","userId":"08119970343853958504"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["{'pca__n_components': 100, 'classifier__estimator__n_neighbors': 7}\n","KNN Best Params Score:  67.61964848408637\n"]}],"source":["random_search = RandomizedSearchCV(pipeline, param, cv = 5, scoring='f1_micro')\n","random_search.fit(new_features, new_labels)\n","\n","print(random_search.best_params_)\n","print(\"KNN Best Params Score: \", random_search.best_score_ * 100)"]},{"cell_type":"code","source":["param = {\n","    'classifier__estimator__C': [0.5, 1, 1.5],\n","    'classifier__estimator__kernel': ['linear', 'poly', 'rbf', 'sigmoid'],\n","    'classifier__estimator__decision_function_shape': ['ovo', 'ovr'],\n","    'pca__n_components': list(range(100, 600, 100))\n","}\n","\n","scaler = StandardScaler()\n","pca = PCA()\n","classifier = MultiOutputClassifier(SVC())\n","pipeline = Pipeline([('scaler', scaler), ('pca', pca), ('classifier', classifier)])\n","\n","csv_score = run_cross_val(param, pipeline, 3, 3, new_features, new_labels)\n","print(\"SVM Avg Score: \", (csv_score.mean() * 100))"],"metadata":{"id":"D8POcFheywqe","executionInfo":{"status":"ok","timestamp":1739381390840,"user_tz":360,"elapsed":1501766,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c5f66113-ecc9-4a15-f149-d3cf7d1227ee"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["SVM Avg Score:  69.32684273498052\n"]}]},{"cell_type":"code","source":["random_search_SVM = RandomizedSearchCV(pipeline, param, cv = 5, scoring='f1_micro')\n","random_search_SVM.fit(new_features, new_labels)\n","\n","print(random_search_SVM.best_params_)\n","print(\"SVM Best Params Score \", (random_search_SVM.best_score_ * 100))"],"metadata":{"id":"2cBquUvP0Fff","executionInfo":{"status":"ok","timestamp":1739382947302,"user_tz":360,"elapsed":1103417,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"93f7cad2-7b62-4c89-a47c-3b303b9bf2ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'pca__n_components': 400, 'classifier__estimator__kernel': 'rbf', 'classifier__estimator__decision_function_shape': 'ovr', 'classifier__estimator__C': 1.5}\n","SVM Best Params Score  62.73198436113958\n"]}]},{"cell_type":"code","source":["param = {\n","    \"estimator__var_smoothing\": [0.00001, 0.0001, 0.001, 0.01, 0.1]\n","}\n","\n","naive_bayes = MultiOutputClassifier(GaussianNB())\n","csv_score = run_cross_val(param, naive_bayes, 5, 5, new_features, new_labels, 5)\n","\n","print(\"Naive Bayes Avg Score: \", (csv_score * 100))"],"metadata":{"id":"rj6m-U4-vD3i","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1738891970834,"user_tz":360,"elapsed":245576,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"outputId":"fb262f11-22cd-4abb-b8c1-2fb0575f2784"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Naive Bayes Avg Score:  71.59961853555873\n"]}]},{"cell_type":"code","source":["random_search_NB = RandomizedSearchCV(naive_bayes, param, cv = 5, scoring='f1_micro', n_iter=5)\n","random_search_NB.fit(new_features, new_labels)\n","\n","print(random_search_NB.best_params_)\n","print(\"Naive Bayes Best Params Score: \", random_search_NB.best_score_ * 100)"],"metadata":{"id":"4Y45jSIFyCeW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1738892024398,"user_tz":360,"elapsed":53566,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"outputId":"81a33625-b952-4036-9500-68fcc54d310d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'estimator__var_smoothing': 0.0001}\n","Naive Bayes Best Params Score:  71.2333966250618\n"]}]},{"cell_type":"code","source":["param = {\n","    \"estimator__max_depth\": [5,10,15,20],\n","    \"estimator__min_samples_leaf\": [5,10,15,20],\n","    \"estimator__max_features\": list(range(50, 200, 50))\n","}\n","\n","decision_tree = MultiOutputClassifier(DecisionTreeClassifier(criterion='entropy'))\n","# clf = clf.fit(data_feature, data_label)\n","\n","csv_score = run_cross_val(param, decision_tree, 5, 5, new_features, new_labels)\n","\n","print(\"Decision Tree Avg Score: \", (csv_score * 100))"],"metadata":{"id":"ULuRIZiPalpv","executionInfo":{"status":"ok","timestamp":1738954695348,"user_tz":360,"elapsed":251046,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3f3728dd-b452-4d3e-9318-fd4e741013ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Avg Score:  64.36199045288326\n"]}]},{"cell_type":"code","source":["random_search_tree = RandomizedSearchCV(decision_tree, param, cv = 5, scoring='f1_micro')\n","random_search_tree.fit(new_features, new_labels)\n","\n","print(random_search_tree.best_params_)\n","print(\"Decision Tree Best Params Score: \", random_search_tree.best_score_ * 100)"],"metadata":{"id":"Vx94EFGJb_MC","executionInfo":{"status":"ok","timestamp":1738954767095,"user_tz":360,"elapsed":71748,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"80f29282-14bf-410f-8363-8037f905d5a0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'estimator__min_samples_leaf': 5, 'estimator__max_features': 100, 'estimator__max_depth': 5}\n","Decision Tree Best Params Score:  57.276203434824694\n"]}]},{"cell_type":"code","source":["param = {\n","    'estimator__max_depth': list(range(35, 46)),\n","    'estimator__min_samples_leaf': list(range(8, 13, 2)),\n","    'estimator__min_impurity_decrease': [0.0, 0.05, 0.1]\n","}\n","\n","random_forest = MultiOutputClassifier(RandomForestClassifier())\n","csv_score = run_cross_val(param, random_forest, 5, 5, new_features, new_labels)\n","print(\"Random Forest Avg Score: \", (csv_score * 100))"],"metadata":{"id":"SJVwsah9ocpd","executionInfo":{"status":"ok","timestamp":1738947614375,"user_tz":360,"elapsed":1569850,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b1aafc4d-a3ec-4a9a-8881-16e704c44075"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Avg Score:  67.48321759590439\n"]}]},{"cell_type":"code","source":["random_search_forest = RandomizedSearchCV(random_forest, param, cv = 5, scoring='f1_micro')\n","random_search_forest.fit(new_features, new_labels)\n","\n","print(random_search_forest.best_params_)\n","print(\"Random Forest Best Params Score: \", random_search_forest.best_score_ * 100)"],"metadata":{"id":"OlFnleyFqjmB","executionInfo":{"status":"ok","timestamp":1738948014657,"user_tz":360,"elapsed":400283,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0c6f0928-8582-4e60-93fd-1868157da6de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'estimator__min_samples_leaf': 8, 'estimator__min_impurity_decrease': 0.1, 'estimator__max_depth': 39}\n","Random Forest Best Params Score:  61.66868692222487\n"]}]},{"cell_type":"code","source":["param = {\n","    'estimator__objective': ['binary:logistic'],\n","    'estimator__n_estimators': list(range(100, 1000, 200)),\n","    'estimator__learning_rate': [0.1, 0.2, 0.3],\n","    'estimator__max_depth': list(range(3, 7))\n","}\n","\n","xgb = MultiOutputClassifier(XGBClassifier())\n","csv_score = run_cross_val(param, xgb, 5, 5, new_features, new_labels)\n","print(\"XGBClassifier Avg Score: \", (csv_score * 100))"],"metadata":{"id":"1aqAJuJN29vx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["random_search_xgb = RandomizedSearchCV(xgb, param, cv = 5, scoring='f1_micro')\n","random_search_xgb.fit(new_features, new_labels)\n","\n","print(random_search_xgb.best_params_)\n","print(\"XGBClassifier Best Params Score: \", random_search_xgb.best_score_ * 100)"],"metadata":{"id":"GUsM-bdC5r0r"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##**Ensembling**"],"metadata":{"id":"EL7pK2fkp9cL"}},{"cell_type":"code","source":["from sklearn.ensemble import BaggingClassifier\n","from sklearn.ensemble import VotingClassifier\n","from sklearn.ensemble import StackingClassifier\n","from sklearn.multioutput import ClassifierChain\n","\n","scaler = StandardScaler()\n","pca = PCA(n_components=400)\n","classifier = SVC(kernel='rbf', decision_function_shape='ovr', C=1.5)\n","base_clf = Pipeline([('scaler', scaler), ('pca', pca), ('classifier', classifier)])\n","chain = ClassifierChain(base_clf, order='random', random_state=42)\n","csv = cross_val_score(chain, new_features, y=new_labels, cv=5, scoring='f1_micro')\n","csv.mean()\n","chain.fit(new_features, new_labels)"],"metadata":{"id":"wVGsdq48qCV_","executionInfo":{"status":"ok","timestamp":1739383599858,"user_tz":360,"elapsed":161797,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"colab":{"base_uri":"https://localhost:8080/","height":230},"outputId":"baa2518e-f1fd-4e54-ad63-2011d62f5524"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ClassifierChain(base_estimator=Pipeline(steps=[('scaler', StandardScaler()),\n","                                               ('pca', PCA(n_components=400)),\n","                                               ('classifier', SVC(C=1.5))]),\n","                order='random', random_state=42)"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ClassifierChain(base_estimator=Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n","                                               (&#x27;pca&#x27;, PCA(n_components=400)),\n","                                               (&#x27;classifier&#x27;, SVC(C=1.5))]),\n","                order=&#x27;random&#x27;, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>ClassifierChain</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.multioutput.ClassifierChain.html\">?<span>Documentation for ClassifierChain</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>ClassifierChain(base_estimator=Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n","                                               (&#x27;pca&#x27;, PCA(n_components=400)),\n","                                               (&#x27;classifier&#x27;, SVC(C=1.5))]),\n","                order=&#x27;random&#x27;, random_state=42)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>base_estimator: Pipeline</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()), (&#x27;pca&#x27;, PCA(n_components=400)),\n","                (&#x27;classifier&#x27;, SVC(C=1.5))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StandardScaler</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>PCA</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.decomposition.PCA.html\">?<span>Documentation for PCA</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>PCA(n_components=400)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=1.5)</pre></div> </div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":125}]},{"cell_type":"code","source":["from sklearn.ensemble import StackingClassifier\n","from sklearn.multiclass import OneVsRestClassifier\n","\n","nb_clf = GaussianNB(var_smoothing=0.0001)\n","knn_clf = Pipeline([('scaler', StandardScaler()), ('pca', PCA(n_components=200)), ('classifier', KNeighborsClassifier(n_neighbors=7))])\n","svm_clf = Pipeline([('scaler', StandardScaler()), ('pca', PCA(n_components=200)), ('classifier', SVC(kernel='linear', decision_function_shape='ovr', C=1))])\n","chain = StackingClassifier(estimators=[('Naive Bayes', nb_clf), (\"KNN\", knn_clf), (\"SVM\", svm_clf)], final_estimator=nb_clf)\n","ovr_model = OneVsRestClassifier(chain)\n","csv = cross_val_score(ovr_model, new_features, y=new_labels, cv=5, scoring='f1_micro')\n","csv.mean()"],"metadata":{"id":"dbmjoHdfjk1T","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739378322260,"user_tz":360,"elapsed":5614723,"user":{"displayName":"Hima T","userId":"08119970343853958504"}},"outputId":"32038c27-6adc-4ec6-a805-ad376c2a6d9e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7032277810242193"]},"metadata":{},"execution_count":67}]},{"cell_type":"markdown","source":["##**Test**"],"metadata":{"id":"5EZAdAhjCa40"}},{"cell_type":"code","source":["%cd ..\n","!ls"],"metadata":{"id":"Ayw9YUZnCEF7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%cd TEST\n","!ls"],"metadata":{"id":"aTyKCY8_DBRo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_categorical = pd.read_excel('TEST_CATEGORICAL.xlsx')\n","test_functional = pd.read_csv('TEST_FUNCTIONAL_CONNECTOME_MATRICES.csv')\n","test_quantitative = pd.read_excel('TEST_QUANTITATIVE_METADATA.xlsx')"],"metadata":{"id":"fJzg6I__DF5Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_categorical.head()"],"metadata":{"id":"p7zz1wkEDW3i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_cat_and_quant = test_categorical.join(test_quantitative.set_index('participant_id'), on='participant_id')\n","test_cat_and_quant.shape"],"metadata":{"id":"sW4M2LEmD4Mr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total = test_cat_and_quant.join(test_functional.set_index('participant_id'), on='participant_id')\n","test_total.shape"],"metadata":{"id":"R67uHK6ZEBI_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["null_cols = []\n","for col in test_total.columns:\n","  if test_total[col].isnull().sum() > 0:\n","    null_cols.append(col)\n","    print(col)"],"metadata":{"id":"v8NuFqsTEHqb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['PreInt_Demos_Fam_Child_Ethnicity'].isna(), ['PreInt_Demos_Fam_Child_Ethnicity']] = 3.0\n","print(test_total['PreInt_Demos_Fam_Child_Ethnicity'].isnull().sum())"],"metadata":{"id":"GuI_6JBMFLJo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'].isna(), ['PreInt_Demos_Fam_Child_Race']] = 10.0\n","print(test_total['PreInt_Demos_Fam_Child_Race'].isnull().sum())"],"metadata":{"id":"xsU-KCdnFgib"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['Barratt_Barratt_P1_Edu'].isnull(), ['participant_id', 'Barratt_Barratt_P1_Occ']]"],"metadata":{"id":"zqiCyT22MOWi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['participant_id'] == 'z0TcjaAHc8af', ['Barratt_Barratt_P2_Edu', 'Barratt_Barratt_P2_Occ']]"],"metadata":{"id":"5uiQvvkWQgEd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['Barratt_Barratt_P1_Occ'].isnull(), ['Barratt_Barratt_P1_Edu']]\n"],"metadata":{"id":"MibfzAoGPR4y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['Barratt_Barratt_P2_Edu'].isnull(), ['Barratt_Barratt_P2_Occ']]\n"],"metadata":{"id":"UQ5ntib6Oo9F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['Barratt_Barratt_P2_Occ'].isnull(), ['Barratt_Barratt_P2_Edu']]\n"],"metadata":{"id":"LBKqr9qrc3ja"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['Barratt_Barratt_P1_Edu'].isnull() & test_total['Barratt_Barratt_P1_Occ'].isnull(), ['missing_parent']] = 1.0\n","test_total.loc[test_total['Barratt_Barratt_P2_Edu'].isnull() & test_total['Barratt_Barratt_P2_Occ'].isnull(), ['missing_parent']] = 1.0\n","test_total.loc[test_total['missing_parent'].isnull(), ['missing_parent']] = 0.0\n","test_total[test_total['missing_parent'] == 0.0]"],"metadata":{"id":"KFnV1lkNUQEj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[(test_total['Barratt_Barratt_P1_Edu'].isnull() & test_total['Barratt_Barratt_P1_Occ'].isnull()), ['Barratt_Barratt_P1_Edu']] = -1.0\n","test_total.loc[((test_total['Barratt_Barratt_P1_Edu'] == -1.0) & test_total['Barratt_Barratt_P1_Occ'].isnull()), ['Barratt_Barratt_P1_Occ']] = -1.0\n","test_total.loc[(test_total['Barratt_Barratt_P2_Edu'].isnull() & test_total['Barratt_Barratt_P2_Occ'].isnull()), ['Barratt_Barratt_P2_Edu']] = -1.0\n","test_total.loc[((test_total['Barratt_Barratt_P2_Edu'] == -1.0) & test_total['Barratt_Barratt_P2_Occ'].isnull()), ['Barratt_Barratt_P2_Occ']] = -1.0"],"metadata":{"id":"KXdyYkDecCfG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total[(test_total['Barratt_Barratt_P2_Edu'] == -1.0) & (test_total['Barratt_Barratt_P2_Occ'].isnull())]"],"metadata":{"id":"7iUJUUmU88Ga"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["median = train_total[['Barratt_Barratt_P2_Edu', 'Barratt_Barratt_P2_Occ']].groupby('Barratt_Barratt_P2_Occ').median().reset_index()\n","median"],"metadata":{"id":"S5sKuxgYfdUX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mean = train_total[['Barratt_Barratt_P2_Edu', 'Barratt_Barratt_P2_Occ']].groupby('Barratt_Barratt_P2_Occ').mean().reset_index()\n","mean"],"metadata":{"id":"cVXcBOdKirVm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["median = median.set_index('Barratt_Barratt_P2_Occ')\n","median.loc[0.0, 'Barratt_Barratt_P2_Edu']\n","for i in range(len(test_total)):\n","  if np.isnan(test_total.loc[i, 'Barratt_Barratt_P2_Edu']) and not np.isnan(test_total.loc[i, 'Barratt_Barratt_P2_Occ']):\n","    index = test_total.loc[i, 'Barratt_Barratt_P2_Occ']\n","    test_total.loc[i, 'Barratt_Barratt_P2_Edu'] = median.loc[index, 'Barratt_Barratt_P2_Edu']\n","    print(test_total.loc[i, 'Barratt_Barratt_P2_Edu'])"],"metadata":{"id":"rjYaXUUnh2O0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['Barratt_Barratt_P2_Edu'].isnull(), ['Barratt_Barratt_P2_Occ']]\n","rows = [1, 54, 252]\n","test_total.loc[rows, ['Barratt_Barratt_P2_Edu']]"],"metadata":{"id":"BofCSi6PlxYr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["median = train_total[['Barratt_Barratt_P2_Edu', 'Barratt_Barratt_P2_Occ']].groupby('Barratt_Barratt_P2_Edu').median().reset_index()\n","median"],"metadata":{"id":"OrNvKIv57Un-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["median = median.set_index('Barratt_Barratt_P2_Edu')\n","for i in range(len(test_total)):\n","  if np.isnan(test_total.loc[i, 'Barratt_Barratt_P2_Occ']) and not np.isnan(test_total.loc[i, 'Barratt_Barratt_P2_Edu']):\n","    index = test_total.loc[i, 'Barratt_Barratt_P2_Edu']\n","    test_total.loc[i, 'Barratt_Barratt_P2_Occ'] = median.loc[index, 'Barratt_Barratt_P2_Occ']\n","    print(test_total.loc[i, 'Barratt_Barratt_P2_Occ'])"],"metadata":{"id":"4Vch6PZY7dgy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total['EHQ_EHQ_Total'].describe()"],"metadata":{"id":"2Iwdvvlb_lmr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['EHQ_EHQ_Total'] == 100.05, ['EHQ_EHQ_Total']] = 100.0\n","test_total.loc[test_total['EHQ_EHQ_Total'] == -100.05, ['EHQ_EHQ_Total']] = -100.0"],"metadata":{"id":"J1Xdf2Tw__4Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['EHQ_EHQ_Total'].isnull(), ['EHQ_EHQ_Total']] = -101.0\n","test_total['EHQ_EHQ_Total'].isna().sum()"],"metadata":{"id":"2o_xQINv-nsr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total.loc[test_total['ColorVision_CV_Score'].isnull(), ['ColorVision_CV_Score']] = -1.0\n","test_total['ColorVision_CV_Score'].isna().sum()"],"metadata":{"id":"YVCWoYbhD8lI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["APQ_cols = ['APQ_P_APQ_P_CP', 'APQ_P_APQ_P_ID', 'APQ_P_APQ_P_INV', 'APQ_P_APQ_P_OPD', 'APQ_P_APQ_P_PM', 'APQ_P_APQ_P_PP']\n","test_total.loc[test_total['APQ_P_APQ_P_PP'].isnull(), APQ_cols]"],"metadata":{"id":"o5VG1-HvExlL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for col in APQ_cols:\n","  test_total.loc[test_total[col].isnull(), col] = -1.0\n","\n","test_total[APQ_cols].isnull().sum()"],"metadata":{"id":"DPV1HrMSIIdC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["SDQ_cols = ['SDQ_SDQ_Conduct_Problems', 'SDQ_SDQ_Difficulties_Total', 'SDQ_SDQ_Emotional_Problems', 'SDQ_SDQ_Externalizing', 'SDQ_SDQ_Generating_Impact', 'SDQ_SDQ_Hyperactivity',\n","            'SDQ_SDQ_Internalizing', 'SDQ_SDQ_Peer_Problems', 'SDQ_SDQ_Prosocial']\n","test_total.loc[test_total['SDQ_SDQ_Prosocial'].isnull(), SDQ_cols]"],"metadata":{"id":"rc1q_NhYJN4-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total = test_total.drop(['SDQ_SDQ_Difficulties_Total'], axis=1)\n","SDQ_cols.remove('SDQ_SDQ_Difficulties_Total')\n","test_total = test_total.drop(['SDQ_SDQ_Internalizing'], axis=1)\n","SDQ_cols.remove('SDQ_SDQ_Internalizing')\n","test_total = test_total.drop(['SDQ_SDQ_Externalizing'], axis=1)\n","SDQ_cols.remove('SDQ_SDQ_Externalizing')\n","\n","test_total.columns"],"metadata":{"id":"YYbYH0VIIsrP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for col in SDQ_cols:\n","  test_total.loc[test_total[col].isnull(), col] = -1.0\n","\n","test_total[SDQ_cols].isnull().sum()"],"metadata":{"id":"zpi0Edc4KO_g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total['Barratt_Barratt_P2_Occ'].value_counts()"],"metadata":{"id":"EsPaTBZLVFdu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["out_of_range_EHQ = test_total[(test_total['EHQ_EHQ_Total'] < -100) | (test_total['EHQ_EHQ_Total'] > 100)]\n","out_of_range_CV = test_total[(test_total['ColorVision_CV_Score'] < 0) | (test_total['ColorVision_CV_Score'] > 18)]\n","out_of_range_CP = test_total[(test_total['APQ_P_APQ_P_CP'] < 3) | (test_total['APQ_P_APQ_P_CP'] > 15)]\n","out_of_range_ID = test_total[(test_total['APQ_P_APQ_P_ID'] < 6) | (test_total['APQ_P_APQ_P_ID'] > 30)]\n","out_of_range_INV = test_total[(test_total['APQ_P_APQ_P_INV'] < 10) | (test_total['APQ_P_APQ_P_INV'] > 50)]\n","out_of_range_OPD = test_total[(test_total['APQ_P_APQ_P_OPD'] < 6) | (test_total['APQ_P_APQ_P_OPD'] > 30)]\n","out_of_range_PM = test_total[(test_total['APQ_P_APQ_P_PM'] < 10) | (test_total['APQ_P_APQ_P_PM'] > 50)]\n","out_of_range_PP = test_total[(test_total['APQ_P_APQ_P_PP'] < 6) | (test_total['APQ_P_APQ_P_PP'] > 30)]\n","out_of_range_Cond = test_total[(test_total['SDQ_SDQ_Conduct_Problems'] < 0) | (test_total['SDQ_SDQ_Conduct_Problems'] > 10)]\n","out_of_range_Emot = test_total[(test_total['SDQ_SDQ_Emotional_Problems'] < 0) | (test_total['SDQ_SDQ_Emotional_Problems'] > 10)]\n","out_of_range_Gen = test_total[(test_total['SDQ_SDQ_Generating_Impact'] < 0) | (test_total['SDQ_SDQ_Generating_Impact'] > 10)]\n","out_of_range_Hyper = test_total[(test_total['SDQ_SDQ_Hyperactivity'] < 0) | (test_total['SDQ_SDQ_Hyperactivity'] > 10)]\n","out_of_range_Peer = test_total[(test_total['SDQ_SDQ_Peer_Problems'] < 0) | (test_total['SDQ_SDQ_Peer_Problems'] > 10)]\n","out_of_range_Pros = test_total[(test_total['SDQ_SDQ_Prosocial'] < 0) | (test_total['SDQ_SDQ_Prosocial'] > 10)]\n","out_of_range_Age = test_total[(test_total['MRI_Track_Age_at_Scan'] < 5) | (test_total['MRI_Track_Age_at_Scan'] > 22)]\n","\n","print('Out of Range Laterality Index (Score)', out_of_range_EHQ['EHQ_EHQ_Total'])\n","print('Out of Range Color vision test score', out_of_range_CV['ColorVision_CV_Score'])\n","print('Out of Range Corporal Punishment Score', out_of_range_CP['APQ_P_APQ_P_CP'])\n","print('Out of Range Inconsistent Discipline Score', out_of_range_ID['APQ_P_APQ_P_ID'])\n","print('Out of Range Involvement Score', out_of_range_INV['APQ_P_APQ_P_INV'])\n","print('Out of Range Other Discipline Practices Score', out_of_range_OPD['APQ_P_APQ_P_OPD'])\n","print('Out of Range Poor Monitoring/Supervision Score', out_of_range_PM['APQ_P_APQ_P_PM'])\n","print('Out of Range Positive Parenting Score', out_of_range_PP['APQ_P_APQ_P_PP'])\n","print('Out of Range Conduct problems scale', out_of_range_Cond['SDQ_SDQ_Conduct_Problems'])\n","print('Out of Range Emotional Problems Scale', out_of_range_Emot['SDQ_SDQ_Emotional_Problems'])\n","print('Out of Range Generating Impact Scores', out_of_range_Gen['SDQ_SDQ_Generating_Impact'])\n","print('Out of Range Hyperactivity Scale', out_of_range_Hyper['SDQ_SDQ_Hyperactivity'])\n","print('Out of Range Peer Problems Scale', out_of_range_Peer['SDQ_SDQ_Peer_Problems'])\n","print('Out of Range Prosocial Scale', out_of_range_Pros['SDQ_SDQ_Prosocial'])\n","print('Out of Range Age at time of MRI scan', out_of_range_Age['MRI_Track_Age_at_Scan'])\n"],"metadata":{"id":"NahXNDSIW1kX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bins = [-2, -1, 2, 7, 11, 15]\n","binned = pd.cut(test_total['APQ_P_APQ_P_CP'], bins, labels=[-1, 0, 1, 2, 3])\n","binned = binned.astype('float64')\n","test_total = test_total.assign(APQ_P_APQ_P_CP=test_total['APQ_P_APQ_P_CP'].astype('float64'))\n","test_total.loc[:, 'APQ_P_APQ_P_CP'] = binned\n","test_total['APQ_P_APQ_P_CP']\n","\n","bins = [-2, -1, 5, 10, 15, 20, 25, 30]\n","binned = pd.cut(test_total['APQ_P_APQ_P_ID'], bins, labels=[-1, 0, 1, 2, 3, 4, 5])\n","binned = binned.astype('float64')\n","test_total = test_total.assign(APQ_P_APQ_P_ID=test_total['APQ_P_APQ_P_ID'].astype('float64'))\n","test_total.loc[:, 'APQ_P_APQ_P_ID'] = binned\n","\n","bins = [-2, -1, 9, 15, 21, 27, 33, 39, 45, 50]\n","binned = pd.cut(test_total['APQ_P_APQ_P_INV'], bins, labels=[-1, 0, 1, 2, 3, 4, 5, 6, 7])\n","binned = binned.astype('float64')\n","test_total = test_total.assign(APQ_P_APQ_P_INV=test_total['APQ_P_APQ_P_INV'].astype('float64'))\n","test_total.loc[:, 'APQ_P_APQ_P_INV'] = binned\n","\n","bins = [-2, -1, 5, 10, 15, 20, 25, 30]\n","binned = pd.cut(test_total['APQ_P_APQ_P_OPD'], bins, labels=[-1, 0, 1, 2, 3, 4, 5])\n","binned = binned.astype('float64')\n","test_total = test_total.assign(APQ_P_APQ_P_OPD=test_total['APQ_P_APQ_P_OPD'].astype('float64'))\n","test_total.loc[:, 'APQ_P_APQ_P_OPD'] = binned\n","\n","bins = [-2, -1, 9, 15, 21, 27, 33, 39, 45, 50]\n","binned = pd.cut(test_total['APQ_P_APQ_P_PM'], bins, labels=[-1, 0, 1, 2, 3, 4, 5, 6, 7])\n","binned = binned.astype('float64')\n","test_total = test_total.assign(APQ_P_APQ_P_PM=test_total['APQ_P_APQ_P_PM'].astype('float64'))\n","test_total.loc[:, 'APQ_P_APQ_P_PM'] = binned\n","\n","bins = [-2, -1, 5, 10, 15, 20, 25, 30]\n","binned = pd.cut(test_total['APQ_P_APQ_P_PP'], bins, labels=[-1, 0, 1, 2, 3, 4, 5])\n","binned = binned.astype('float64')\n","test_total = test_total.assign(APQ_P_APQ_P_PP=test_total['APQ_P_APQ_P_PP'].astype('float64'))\n","test_total.loc[:, 'APQ_P_APQ_P_PP'] = binned"],"metadata":{"id":"Ax7vrxQUcksN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["null_cols = []\n","for col in test_total.columns:\n","  if test_total[col].isnull().sum() > 0:\n","    null_cols.append(col)\n","    print(col)"],"metadata":{"id":"-1KscNdE-46y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total['Basic_Demos_Study_Site'] = test_total['Basic_Demos_Study_Site'].astype(object)\n","test_total.loc[test_total['Basic_Demos_Study_Site'] == 1, 'Basic_Demos_Study_Site'] = 'Staten Island_Study'\n","test_total.loc[test_total['Basic_Demos_Study_Site'] == 2, 'Basic_Demos_Study_Site'] = 'MRV'\n","test_total.loc[test_total['Basic_Demos_Study_Site'] == 3, 'Basic_Demos_Study_Site'] = 'Midtown'\n","test_total.loc[test_total['Basic_Demos_Study_Site'] == 4, 'Basic_Demos_Study_Site'] = 'Harlem'\n","test_total.loc[test_total['Basic_Demos_Study_Site'] == 5, 'Basic_Demos_Study_Site'] = 'SI RUMC'\n","test_total = test_total.join(pd.get_dummies(test_total['Basic_Demos_Study_Site'], dtype=float))\n","test_total.loc[:, ['Staten Island_Study']] = 0.0\n","test_total.loc[:, ['MRV']] = 0.0\n","test_total.loc[:, ['Midtown']] = 0.0\n","test_total = test_total.drop(['Basic_Demos_Study_Site'], axis=1)\n","test_total"],"metadata":{"id":"Fe4v7MjbeJj4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total['PreInt_Demos_Fam_Child_Ethnicity'] = test_total['PreInt_Demos_Fam_Child_Ethnicity'].astype(object)\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Ethnicity'] == 0, 'PreInt_Demos_Fam_Child_Ethnicity'] = 'Not Hispanic or Latino'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Ethnicity'] == 1, 'PreInt_Demos_Fam_Child_Ethnicity'] = 'Hispanic or Latino'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Ethnicity'] == 2, 'PreInt_Demos_Fam_Child_Ethnicity'] = 'Decline to specify'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Ethnicity'] == 3, 'PreInt_Demos_Fam_Child_Ethnicity'] = 'Unknown_Eth'\n","test_total = test_total.join(pd.get_dummies(test_total['PreInt_Demos_Fam_Child_Ethnicity'], dtype=float))\n","test_total = test_total.drop(['PreInt_Demos_Fam_Child_Ethnicity'], axis=1)\n","test_total"],"metadata":{"id":"Wz-amZ6CeYyU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total['PreInt_Demos_Fam_Child_Race'] = test_total['PreInt_Demos_Fam_Child_Race'].astype(object)\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 0, 'PreInt_Demos_Fam_Child_Race'] = 'White/Caucasian'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 1, 'PreInt_Demos_Fam_Child_Race'] = 'Black/African American'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 2, 'PreInt_Demos_Fam_Child_Race'] = 'Hispanic'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 3, 'PreInt_Demos_Fam_Child_Race'] = 'Asia'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 4, 'PreInt_Demos_Fam_Child_Race'] = 'Indian'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 5, 'PreInt_Demos_Fam_Child_Race'] = 'Native American Indian'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 6, 'PreInt_Demos_Fam_Child_Race'] = 'American Indian/Alaskan Native'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 7, 'PreInt_Demos_Fam_Child_Race'] = 'Native Hawaiian/Other Pacific Islander'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 8, 'PreInt_Demos_Fam_Child_Race'] = 'Two or more races'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 9, 'PreInt_Demos_Fam_Child_Race'] = 'Other race'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 10, 'PreInt_Demos_Fam_Child_Race'] = 'Unknown_Race'\n","test_total.loc[test_total['PreInt_Demos_Fam_Child_Race'] == 11, 'PreInt_Demos_Fam_Child_Race'] = 'Choose not to specify'\n","test_total = test_total.join(pd.get_dummies(test_total['PreInt_Demos_Fam_Child_Race'], dtype=float))\n","test_total = test_total.drop(['PreInt_Demos_Fam_Child_Race'], axis=1)\n","test_total"],"metadata":{"id":"s2pvcB21eizM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_total['MRI_Track_Scan_Location'] = test_total['MRI_Track_Scan_Location'].astype(object)\n","test_total.loc[test_total['MRI_Track_Scan_Location'] == 1, 'MRI_Track_Scan_Location'] = 'Staten Island_Scan'\n","test_total.loc[test_total['MRI_Track_Scan_Location'] == 2, 'MRI_Track_Scan_Location'] = 'RUBIC'\n","test_total.loc[test_total['MRI_Track_Scan_Location'] == 3, 'MRI_Track_Scan_Location'] = 'CBIC'\n","test_total.loc[test_total['MRI_Track_Scan_Location'] == 4, 'MRI_Track_Scan_Location'] = 'CUNY'\n","test_total = test_total.join(pd.get_dummies(test_total['MRI_Track_Scan_Location'], dtype=float))\n","test_total.loc[:, ['RUBIC']] = 0.0\n","test_total.loc[:, ['Staten Island_Scan']] = 0.0\n","test_total = test_total.drop(['MRI_Track_Scan_Location'], axis=1)\n","test_total"],"metadata":{"id":"CeawI88Qemql"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_total.columns"],"metadata":{"id":"JdUEQDGufgwK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(test_total.columns)"],"metadata":{"id":"dJ1dUBJxfjvx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_total.head()"],"metadata":{"id":"U5VoCSm_9SkK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["participant_ids = test_total['participant_id']\n","test_total = test_total.drop(['participant_id'], axis=1)\n","test_total = test_total.loc[:, new_features.columns]\n","test_total"],"metadata":{"id":"HwDKgxNJ9VkU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for col in test_total.columns:\n","  if test_total[col].isnull().sum() > 0:\n","    print(col)"],"metadata":{"id":"m3pWiLZz-hLH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["result_arr = random_search_xgb.predict(test_total)"],"metadata":{"id":"sgwNT-fH4dmo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["adhd_outcomes = []\n","sex_res = []\n","for arr in result_arr:\n","  adhd_outcomes.append(arr[0])\n","  sex_res.append(arr[1])"],"metadata":{"id":"_3Uye5rEFLbZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["result = pd.DataFrame(columns=['participant_id', 'ADHD_Outcome', 'Sex_F'])\n","result['participant_id'] = participant_ids\n","result['ADHD_Outcome'] = adhd_outcomes\n","result['Sex_F'] = sex_res\n","result"],"metadata":{"id":"FkxeaGlnEpKJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["result.to_csv('submission.csv', index=False)"],"metadata":{"id":"O35JTpSgF0W8"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMLaJE5a5qhcl+wTzGEPgYT"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}